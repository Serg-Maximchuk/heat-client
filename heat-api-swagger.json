{
  "trustAnchors": "test",
  "swagger": "2.0",
  "info": {
    "description": "The HEAT <u><b>INTERACTIVE</b></u> REST API, ",
    "version": "1.0",
    "title": "HEAT API",
    "contact": {
      "url": "http://heatledger.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://raw.githubusercontent.com/Heat-Ledger-Ltd/heat-ui/master/LICENSE"
    }
  },
  "host": "heatwallet.com:7734",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Blockchain"
    },
    {
      "name": "Peers"
    },
    {
      "name": "Mining"
    },
    {
      "name": "Trade"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Transactions"
    },
    {
      "name": "Register"
    },
    {
      "name": "MicroService"
    },
    {
      "name": "Exchange"
    },
    {
      "name": "KeyStore"
    },
    {
      "name": "Search"
    },
    {
      "name": "Tools"
    },
    {
      "name": "Messages"
    },
    {
      "name": "Order"
    },
    {
      "name": "Benchmark"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/account/balance/virtual/{account}/{asset}/{propertiesAccountId}/{propertiesProtocol}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns account asset balance, balance with asset=0 is your HEAT balance. This includes your virtual balance (requires replicator)",
        "description": "",
        "operationId": "balanceVirtual",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account numeric id",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset id, asset=0 is your HEAT balance",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertiesAccountId",
            "in": "path",
            "description": "Asset properties account id determines whose asset properties you want included in the result, a value of 0 means the asset issuer",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesProtocol",
            "in": "path",
            "description": "Asset properties protocol, a value of 0 means not to include asset properties in the result",
            "required": true,
            "type": "string",
            "default": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountBalance"
            }
          }
        }
      }
    },
    "/account/balance/{account}/{asset}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns account asset balance, balance with asset=0 is your HEAT balance",
        "description": "",
        "operationId": "balance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account numeric id",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset id, asset=0 is your HEAT balance",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountBalance"
            }
          }
        }
      }
    },
    "/account/balances/{account}/{propertiesAccountId}/{propertiesProtocol}/{from}/{to}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns account HEAT balance and all asset balances, balance with asset=0 is your HEAT balance (requires replicator)",
        "description": "",
        "operationId": "balances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account numeric id",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          },
          {
            "name": "propertiesAccountId",
            "in": "path",
            "description": "Asset properties account id determines whose asset properties you want included in the result, a value of 0 means the asset issuer",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesProtocol",
            "in": "path",
            "description": "Asset properties protocol, a value of 0 means not to include asset properties in the result",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBalance"
              }
            }
          }
        }
      }
    },
    "/account/find/hash/{hash}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find account by numeric name hash",
        "description": "",
        "operationId": "find hash",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Account name numeric hash",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/account/find/name/{name}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find account by name",
        "description": "",
        "operationId": "name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The account name (UTF-8)",
            "required": true,
            "type": "string",
            "x-example": "heatledger"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/account/find/publickey/{publicKey}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find account by public key",
        "description": "",
        "operationId": "publicKeyFind",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "publicKey",
            "in": "path",
            "description": "The account public key in HEX format",
            "required": true,
            "type": "string",
            "x-example": "1259ec21d31a30898d7cd1609f80d9668b4778e3d97e941044b39f0c44d2e51b"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/account/find/secretphrase/{secretPhrase}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find account by secret phrase",
        "description": "",
        "operationId": "secretPhrase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The account secret phrase",
            "required": true,
            "type": "string",
            "x-example": "It was a bright cold day in April, and the clocks were striking thirteen."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/account/find/{numericId}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find account by numeric id",
        "description": "",
        "operationId": "account",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numericId",
            "in": "path",
            "description": "The account numeric id",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/account/internetaddress/{account}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns account registered internet address (the host of node on which account is forging)",
        "description": "",
        "operationId": "internetAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account numeric id",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountInternetAddress"
            }
          }
        }
      }
    },
    "/account/list/{assigner}/{from}/{to}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List accounts with public name (requires replicator)",
        "description": "",
        "operationId": "list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assigner",
            "in": "path",
            "description": "Account that assigned the name (pass 0 to include all assigners)",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        }
      }
    },
    "/account/payments/count/{account}/{currency}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns payments count from and to an account, includes asset payments (requires replicator)",
        "description": "",
        "operationId": "paymentsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account id to returns payments from and to from",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID or pass 'all' to indicate all currencies",
            "required": true,
            "type": "string",
            "default": "all"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/account/payments/{account}/{currency}/{sort}/{asc}/{from}/{to}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns payments from and to an account, includes asset payments (requires replicator)",
        "description": "",
        "operationId": "payments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account id to returns payments from and to from",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID or pass 'all' to indicate all currencies",
            "required": true,
            "type": "string",
            "default": "all"
          },
          {
            "name": "sort",
            "in": "path",
            "description": "Sort on this property",
            "required": true,
            "type": "string",
            "default": "timestamp",
            "x-example": "timestamp",
            "enum": [
              "timestamp",
              "sender",
              "recipient",
              "amount"
            ]
          },
          {
            "name": "asc",
            "in": "path",
            "description": "Sort is ascending or descending",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          }
        }
      }
    },
    "/account/publickey/{account}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns account publickey",
        "description": "",
        "operationId": "get publickey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account numeric id",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/account/search/{assigner}/{query}/{from}/{to}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Search accounts with public name by name (requires replicator)",
        "description": "",
        "operationId": "search",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assigner",
            "in": "path",
            "description": "Account that assigned the name (pass 0 to include all assigners)",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "query",
            "in": "path",
            "description": "The account name (UTF-8)",
            "required": true,
            "type": "string",
            "x-example": "heatledger"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        }
      }
    },
    "/benchmark/block/{height}": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Get a minimal block object given the block height",
        "description": "",
        "operationId": "blockmin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "The block height",
            "required": true,
            "type": "string",
            "x-example": "1234"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockMin"
            }
          }
        }
      }
    },
    "/benchmark/highestTransactionId/{blockId}": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Get highest transaction id in a block",
        "description": "",
        "operationId": "highestTransactionId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "blockId",
            "in": "path",
            "description": "Block id",
            "required": true,
            "type": "string",
            "x-example": "1234567"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/benchmark/registerAccount/{publicKey}": {
      "get": {
        "tags": [
          "Benchmark"
        ],
        "summary": "Creates an account",
        "description": "",
        "operationId": "registerAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "publicKey",
            "in": "path",
            "description": "PublicKey",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/blockchain/block/height/{height}/{includeTransactions}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get a block object given its height",
        "description": "",
        "operationId": "height",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "type": "string",
            "x-example": "1"
          },
          {
            "name": "includeTransactions",
            "in": "path",
            "description": "True to include transaction details, if false `transactions` will hold only transaction ids",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            }
          }
        }
      }
    },
    "/blockchain/block/{numericId}/{includeTransactions}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get a block object given a numeric block id",
        "description": "",
        "operationId": "block",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numericId",
            "in": "path",
            "description": "The block ID",
            "required": true,
            "type": "string",
            "x-example": "1234"
          },
          {
            "name": "includeTransactions",
            "in": "path",
            "description": "True to include transaction details, if false `transactions` will hold only transaction ids",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            }
          }
        }
      }
    },
    "/blockchain/blocks/account/count/{account}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Counts all blocks generated by account (requires replicator)",
        "description": "",
        "operationId": "accountBlocksCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/blockchain/blocks/account/{account}/{firstIndex}/{lastIndex}/{includeTransactions}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get a list of block objects for an account from start index to end index (requires replicator)",
        "description": "",
        "operationId": "accountBlocks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account",
            "required": true,
            "type": "string"
          },
          {
            "name": "firstIndex",
            "in": "path",
            "description": "First block to retrieve (optional, default is zero or the last block on the blockchain)",
            "required": true,
            "type": "string",
            "x-example": "1"
          },
          {
            "name": "lastIndex",
            "in": "path",
            "description": "The last block to retrieve (optional, default is firstIndex + 99)",
            "required": true,
            "type": "string",
            "x-example": "10"
          },
          {
            "name": "includeTransactions",
            "in": "path",
            "description": "True to include transaction details, if false `transactions` will hold only transaction ids, if null NO transactions are returned",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "false",
              "true",
              "null"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockCondensed"
              }
            }
          }
        }
      }
    },
    "/blockchain/blocks/{firstIndex}/{lastIndex}/{includeTransactions}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get a list of block objects from start index to end index (requires replicator)",
        "description": "",
        "operationId": "blocks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstIndex",
            "in": "path",
            "description": "First block to retrieve (optional, default is zero or the last block on the blockchain)",
            "required": true,
            "type": "string",
            "x-example": "1"
          },
          {
            "name": "lastIndex",
            "in": "path",
            "description": "The last block to retrieve (optional, default is firstIndex + 99)",
            "required": true,
            "type": "string",
            "x-example": "10"
          },
          {
            "name": "includeTransactions",
            "in": "path",
            "description": "True to include transaction details, if false `transactions` will hold only transaction ids, if null NO transactions are returned",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "false",
              "true",
              "null"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockCondensed"
              }
            }
          }
        }
      }
    },
    "/blockchain/ecblock/{timestamp}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get the Economic Clustering block based on timestamp",
        "description": "",
        "operationId": "ecblock",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timestamp",
            "in": "path",
            "description": "Timestamp",
            "required": true,
            "type": "string",
            "x-example": "1234567"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            }
          }
        }
      }
    },
    "/blockchain/fees": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Returns all current fees",
        "description": "",
        "operationId": "fees",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Fees"
            }
          }
        }
      }
    },
    "/blockchain/stake/{blockCount}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Returns the combined stake for the past N(min 1, max 1440) block generators",
        "description": "",
        "operationId": "stake",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "blockCount",
            "in": "path",
            "description": "Number of blocks",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JSONStake"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/blockchain/status": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get the state of the server node and network",
        "description": "",
        "operationId": "status",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlockchainStatus"
            }
          }
        }
      }
    },
    "/blockchain/status2": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Returns extended state info (slower)",
        "description": "",
        "operationId": "status2",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/State"
            }
          }
        }
      }
    },
    "/blockchain/transaction/{numericId}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get a transaction given its numeric transaction id",
        "description": "",
        "operationId": "transaction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "numericId",
            "in": "path",
            "description": "The transaction ID",
            "required": true,
            "type": "string",
            "x-example": "11112057636390751286"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        }
      }
    },
    "/blockchain/transactions/account/count/{account}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Counts all all transactions for a account (requires replicator)",
        "description": "",
        "operationId": "transactionsAccountCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/blockchain/transactions/account/{account}/{from}/{to}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Lists all transactions for a account (requires replicator)",
        "description": "",
        "operationId": "transactionsAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account id",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionExtended"
              }
            }
          }
        }
      }
    },
    "/blockchain/transactions/all/count": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Counts all all transactions (requires replicator)",
        "description": "",
        "operationId": "transactionsAllCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/blockchain/transactions/all/{from}/{to}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Lists all transactions (requires replicator)",
        "description": "",
        "operationId": "transactionsAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionExtended"
              }
            }
          }
        }
      }
    },
    "/blockchain/transactions/block/count/{block}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Counts all all transactions for a block (requires replicator)",
        "description": "",
        "operationId": "transactionsBlockCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "block",
            "in": "path",
            "description": "Block id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/blockchain/transactions/block/{block}/{from}/{to}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Lists all transactions for a block (requires replicator)",
        "description": "",
        "operationId": "transactionsBlock",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "block",
            "in": "path",
            "description": "Block id",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionExtended"
              }
            }
          }
        }
      }
    },
    "/blockchain/transactions/list/{sender}/{recipient}/{from}/{to}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Lists all transactions from sender to recipient (requires replicator)",
        "description": "",
        "operationId": "transactionsFromTo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sender",
            "in": "path",
            "description": "Sender account id",
            "required": true,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "path",
            "description": "Recipient account id",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionExtended"
              }
            }
          }
        }
      }
    },
    "/blockchain/unconfirmed/{sender}/{recipient}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get a list of unconfirmed transactions",
        "description": "",
        "operationId": "unconfirmedTransactions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sender",
            "in": "path",
            "description": "If provided only unconfirmed transactions sent from this account are returned (optional, pass 0 to accept any sender)",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "recipient",
            "in": "path",
            "description": "If provided only unconfirmed transactions sent to this account are returned (optional, pass 0 to accept any recipient)",
            "required": true,
            "type": "string",
            "default": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionUnconfirmed"
              }
            }
          }
        }
      }
    },
    "/blockchain/unconfirmedids/{sender}/{recipient}": {
      "get": {
        "tags": [
          "Blockchain"
        ],
        "summary": "Get a list of unconfirmed transaction ids",
        "description": "",
        "operationId": "unconfirmedIds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sender",
            "in": "path",
            "description": "If provided only unconfirmed transaction ids sent from this account are returned (optional, pass 0 to accept any sender)",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "recipient",
            "in": "path",
            "description": "If provided only unconfirmed transaction ids sent to this account are returned (optional, pass 0 to accept any recipient)",
            "required": true,
            "type": "string",
            "default": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/exchange/asset/accounts/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Returns asset balances (requires replicator)",
        "description": "",
        "operationId": "asset balances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset",
            "in": "path",
            "description": "The asset numeric id",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountAsset"
              }
            }
          }
        }
      }
    },
    "/exchange/asset/certification": {
      "post": {
        "tags": [
          "Exchange"
        ],
        "summary": "Sets asset certification info (requires replicator)",
        "description": "",
        "operationId": "assetCertify",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset",
            "in": "formData",
            "description": "Asset id",
            "required": true,
            "type": "string"
          },
          {
            "name": "certified",
            "in": "formData",
            "description": "Set asset certification status",
            "required": true,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "symbol",
            "in": "formData",
            "description": "Certified asset symbol",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Certified asset name",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageIsText",
            "in": "formData",
            "description": "False if the message is a hex string, otherwise the message is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "messageToEncrypt",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false) and converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptIsText",
            "in": "formData",
            "description": "False if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptedMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncrypt if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptedMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelf",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelfIsText",
            "in": "formData",
            "description": "False if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptToSelfMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncryptToSelf if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptToSelfMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignment",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, assigns non-public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignmentSignature",
            "in": "formData",
            "description": "Private name assignment signature (required when privateNameAssignment was given, see /tools/privatename/signature for details)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignment",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, assigns public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignmentSignature",
            "in": "formData",
            "description": "Public name assignment signature (required when publicNameAssignment was given, see /tools/publicname/signature for details)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/exchange/asset/certification/{asset}/{certifierAccount}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Returns asset certification info (requires replicator)",
        "description": "",
        "operationId": "assetCertification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset",
            "in": "path",
            "required": true,
            "type": "string",
            "x-example": "1234"
          },
          {
            "name": "certifierAccount",
            "in": "path",
            "required": true,
            "type": "string",
            "x-example": "5678"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JSONAssetCertification"
            }
          }
        }
      }
    },
    "/exchange/asset/issue": {
      "post": {
        "tags": [
          "Exchange"
        ],
        "summary": "Create an asset on the exchange",
        "description": "",
        "operationId": "issue",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "quantity",
            "in": "formData",
            "description": "The total amount (in QNT) of the asset in existence, maximum QNT is 9,223,372,036,854,775,807 or 92,233,720,368.54775807 (92 billion whole shares)",
            "required": true,
            "type": "string"
          },
          {
            "name": "decimals",
            "in": "formData",
            "description": "The number of decimal places used by the asset, this value is used for UI display purposes only. All assets are always represented represented internally as 8 decimal numbers. So one whole share is stored as 1.00000000 and the minimum allowed amount is 0.00000001 no matter what number you provide for decimals.",
            "required": false,
            "type": "string",
            "default": "0"
          },
          {
            "name": "descriptionUrl",
            "in": "formData",
            "description": "URL (http/https) pointing to a hosted asset description file (file contents must be UTF-8, url max length is 300 characters, url must start with http:// or https://)",
            "required": false,
            "type": "string"
          },
          {
            "name": "descriptionHash",
            "in": "formData",
            "description": "SHA256 hash of the contents of the asset description file (SHA256 hash must be in HEX format)",
            "required": false,
            "type": "string"
          },
          {
            "name": "dillutable",
            "in": "formData",
            "description": "Is the issuer allowed to later issue more assets",
            "required": false,
            "type": "string",
            "default": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/exchange/asset/issuemore": {
      "post": {
        "tags": [
          "Exchange"
        ],
        "summary": "Issue extra assets, assign those extra assets to transaction recipient",
        "description": "",
        "operationId": "issueMore",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset",
            "in": "formData",
            "description": "Asset numeric identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "quantity",
            "in": "formData",
            "description": "The total amount (in QNT) of the asset to create, the final total allowed number of shares is always maximum QNT is 9,223,372,036,854,775,807 or 92,233,720,368.54775807 (92 billion whole shares)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/exchange/asset/properties": {
      "post": {
        "tags": [
          "Exchange"
        ],
        "summary": "Sets the asset properties for the given protocol (requires replicator)",
        "description": "",
        "operationId": "assetProperties",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset",
            "in": "formData",
            "description": "Asset id",
            "required": true,
            "type": "string"
          },
          {
            "name": "protocol",
            "in": "formData",
            "description": "Protocol indicator (number, everything from 1 and up is valid)",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "description": "Value (UTF-8, max length when converted to bytes is 896)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageIsText",
            "in": "formData",
            "description": "False if the message is a hex string, otherwise the message is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "messageToEncrypt",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false) and converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptIsText",
            "in": "formData",
            "description": "False if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptedMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncrypt if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptedMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelf",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelfIsText",
            "in": "formData",
            "description": "False if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptToSelfMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncryptToSelf if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptToSelfMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignment",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, assigns non-public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignmentSignature",
            "in": "formData",
            "description": "Private name assignment signature (required when privateNameAssignment was given, see /tools/privatename/signature for details)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignment",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, assigns public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignmentSignature",
            "in": "formData",
            "description": "Public name assignment signature (required when publicNameAssignment was given, see /tools/publicname/signature for details)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/exchange/asset/properties/{asset}/{propertiesAccount}/{propertiesProtocol}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Find asset properties by numeric id, properties account and protocol (requires replicator)",
        "description": "",
        "operationId": "asset properties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset",
            "in": "path",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          },
          {
            "name": "propertiesAccount",
            "in": "path",
            "description": "Asset properties account id determines whose asset properties you want included in the result, a value of 0 means the asset issuer",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesProtocol",
            "in": "path",
            "description": "Asset properties protocol, a value of 0 means not to include asset properties in the result",
            "required": true,
            "type": "string",
            "default": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AssetProperties"
            }
          }
        }
      }
    },
    "/exchange/asset/protocol1/{symbol}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Finds protocol 1 asset by symbol (requires replicator)",
        "description": "Protocol 1 assets enforce unique symbol names",
        "operationId": "assetProtocol1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "description": "Asset symbol",
            "required": true,
            "type": "string",
            "default": "BTC"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JSONAssetProtocol1"
            }
          }
        }
      }
    },
    "/exchange/assets/protocol1/{from}/{to}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Lists all protocol 1 assets (requires replicator)",
        "description": "Protocol 1 assets enforce unique symbol names",
        "operationId": "assetsProtocol1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONAssetProtocol1"
              }
            }
          }
        }
      }
    },
    "/exchange/chartdata/{currency}/{asset}/{window}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Retrieves OHLC chart data for trading pair (requires replicator)",
        "description": "Chartdata entries in the 'data' property are arrays with indexed properties.<br>[<br>&nbsp;&nbsp;timestamp, // number timestamp in HEAT epoch format<br>&nbsp;&nbsp;avg,       // string or number if < 9007199254740991<br>&nbsp;&nbsp;low,       // string or number if < 9007199254740991<br>&nbsp;&nbsp;high,      // string or number if < 9007199254740991<br>&nbsp;&nbsp;vol,       // string or number if < 9007199254740991<br>&nbsp;&nbsp;open,      // string or number if < 9007199254740991<br>&nbsps;&nbsp;close     // string or number if < 9007199254740991<br>]",
        "operationId": "chartdata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "window",
            "in": "path",
            "description": "Charting interval window",
            "required": true,
            "type": "string",
            "default": "ONE_MINUTE",
            "enum": [
              "ONE_MINUTE",
              "FIVE_MINUTES",
              "TEN_MINUTES",
              "HOUR",
              "DAY",
              "WEEK"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChartData"
            }
          }
        }
      }
    },
    "/exchange/market/{currency}/{asset}/{propertiesAccountId}/{propertiesProtocol}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Finds a market for a currency and asset (requires replicator)",
        "description": "",
        "operationId": "market",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesAccountId",
            "in": "path",
            "description": "Asset properties account id determines whose asset properties you want included in the result, a value of 0 means the asset issuer",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesProtocol",
            "in": "path",
            "description": "Asset properties protocol, a value of 0 means not to include asset properties in the result",
            "required": true,
            "type": "string",
            "default": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Market"
              }
            }
          }
        }
      }
    },
    "/exchange/markets/all/{sort}/{asc}/{propertiesAccountId}/{propertiesProtocol}/{from}/{to}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Lists all markets (requires replicator)",
        "description": "",
        "operationId": "marketsAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "path",
            "description": "Sort order, sort is either by 24hr percentage change (default), 24hr volume, price or none (database natural order)",
            "required": true,
            "type": "string",
            "default": "change",
            "enum": [
              "change",
              "volume",
              "price",
              "none"
            ]
          },
          {
            "name": "asc",
            "in": "path",
            "description": "Sort ascending",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "propertiesAccountId",
            "in": "path",
            "description": "Asset properties account id determines whose asset properties you want included in the result, a value of 0 means the asset issuer",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesProtocol",
            "in": "path",
            "description": "Asset properties protocol, a value of 0 means not to include asset properties in the result",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Market"
              }
            }
          }
        }
      }
    },
    "/exchange/markets/{currency}/{sort}/{asc}/{propertiesAccountId}/{propertiesProtocol}/{from}/{to}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Lists all markets for a currency (requires replicator)",
        "description": "",
        "operationId": "markets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "sort",
            "in": "path",
            "description": "Sort order, sort is either by 24hr percentage change (default), 24hr volume, price or none (database natural order)",
            "required": true,
            "type": "string",
            "default": "change",
            "enum": [
              "change",
              "volume",
              "price",
              "none"
            ]
          },
          {
            "name": "asc",
            "in": "path",
            "description": "Sort ascending",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "propertiesAccountId",
            "in": "path",
            "description": "Asset properties account id determines whose asset properties you want included in the result, a value of 0 means the asset issuer",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesProtocol",
            "in": "path",
            "description": "Asset properties protocol, a value of 0 means not to include asset properties in the result",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Market"
              }
            }
          }
        }
      }
    },
    "/exchange/transfer": {
      "post": {
        "tags": [
          "Exchange"
        ],
        "summary": "Transfer a quantity of an asset from one account to another",
        "description": "",
        "operationId": "transfer",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset",
            "in": "formData",
            "description": "Asset ID of the asset being transfered",
            "required": true,
            "type": "string"
          },
          {
            "name": "quantity",
            "in": "formData",
            "description": "The amount (in QNT) of the asset being transfered",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageIsText",
            "in": "formData",
            "description": "False if the message is a hex string, otherwise the message is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "messageToEncrypt",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false) and converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptIsText",
            "in": "formData",
            "description": "False if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptedMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncrypt if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptedMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelf",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelfIsText",
            "in": "formData",
            "description": "False if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptToSelfMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncryptToSelf if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptToSelfMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignment",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, assigns non-public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignmentSignature",
            "in": "formData",
            "description": "Private name assignment signature (required when privateNameAssignment was given, see /tools/privatename/signature for details)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignment",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, assigns public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignmentSignature",
            "in": "formData",
            "description": "Public name assignment signature (required when publicNameAssignment was given, see /tools/publicname/signature for details)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/keystore/count/{account}": {
      "get": {
        "tags": [
          "KeyStore"
        ],
        "summary": "Counts key/value entries for an account (requires replicator)",
        "description": "",
        "operationId": "keyStoreCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account scope (numeric account identifier)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/keystore/get/{account}/{key}": {
      "get": {
        "tags": [
          "KeyStore"
        ],
        "summary": "Get the value for account key value  (requires replicator)",
        "description": "",
        "operationId": "keyStoreGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account scope (numeric account identifier)",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key name (UTF-8, max length when converted to bytes is 100)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyStoreBundle"
            }
          }
        }
      }
    },
    "/keystore/list/{account}/{from}/{to}": {
      "get": {
        "tags": [
          "KeyStore"
        ],
        "summary": "Lists all keys for account (requires replicator)",
        "description": "",
        "operationId": "keyStoreList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account scope (numeric account identifier)",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyStoreBundle"
              }
            }
          }
        }
      }
    },
    "/keystore/put": {
      "post": {
        "tags": [
          "KeyStore"
        ],
        "summary": "Sets the value identified by key (requires replicator)",
        "description": "",
        "operationId": "keyStorePut",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "formData",
            "description": "Key name (UTF-8, max length when converted to bytes is 100)",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "description": "Value (UTF-8, max length when converted to bytes is 896)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageIsText",
            "in": "formData",
            "description": "False if the message is a hex string, otherwise the message is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "messageToEncrypt",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false) and converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptIsText",
            "in": "formData",
            "description": "False if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptedMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncrypt if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptedMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelf",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelfIsText",
            "in": "formData",
            "description": "False if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptToSelfMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncryptToSelf if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptToSelfMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignment",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, assigns non-public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignmentSignature",
            "in": "formData",
            "description": "Private name assignment signature (required when privateNameAssignment was given, see /tools/privatename/signature for details)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignment",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, assigns public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignmentSignature",
            "in": "formData",
            "description": "Public name assignment signature (required when publicNameAssignment was given, see /tools/publicname/signature for details)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/messages/contact/count/{accountA}/{accountB}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Count of all contacts messages (requires replicator)",
        "description": "",
        "operationId": "contactCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountA",
            "in": "path",
            "description": "Account a",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "accountB",
            "in": "path",
            "description": "Account B",
            "required": true,
            "type": "string",
            "x-example": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/messages/contact/{accountA}/{accountB}/{from}/{to}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Lists messages for a contact (requires replicator)",
        "description": "",
        "operationId": "contact",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountA",
            "in": "path",
            "description": "Account a",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "accountB",
            "in": "path",
            "description": "Account B",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          }
        }
      }
    },
    "/messages/latest/{account}/{from}/{to}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Lists latest message contacts (requires replicator)",
        "description": "",
        "operationId": "latest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account",
            "required": true,
            "type": "string",
            "x-example": "0"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageContact"
              }
            }
          }
        }
      }
    },
    "/microservice/{params}": {
      "get": {
        "tags": [
          "MicroService"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "params",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "pattern": ".*"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "MicroService"
        ],
        "operationId": "post",
        "parameters": [
          {
            "name": "params",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "pattern": ".*"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/mining/info": {
      "post": {
        "tags": [
          "Mining"
        ],
        "summary": "Get current mining info for all miners (if secret phrase ommitted) or for a single miner",
        "description": "",
        "operationId": "info2",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, if ommitted will return all mining info)",
            "required": false,
            "type": "string",
            "x-example": "i am so secret"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Mining"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mining/info/{secretPhrase}": {
      "get": {
        "tags": [
          "Mining"
        ],
        "summary": "Get current mining info for all miners (if secret phrase ommitted) or for a single miner",
        "description": "",
        "operationId": "info",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase of the account (optional, if ommitted will return all mining info)",
            "required": true,
            "type": "string",
            "x-example": "i am so secret"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Mining"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mining/rewards/account/{account}": {
      "get": {
        "tags": [
          "Mining"
        ],
        "summary": "Find reward info for account",
        "description": "",
        "operationId": "rewardsAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "The account numeric id",
            "required": true,
            "type": "string",
            "x-example": "1739068987193023818"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JSONRewardsInfo"
            }
          }
        }
      }
    },
    "/mining/rewards/list/count": {
      "get": {
        "tags": [
          "Mining"
        ],
        "summary": "Count number of reward info entries",
        "description": "",
        "operationId": "rewardsListCount",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/mining/rewards/list/{firstIndex}/{lastIndex}": {
      "get": {
        "tags": [
          "Mining"
        ],
        "summary": "List all reward info",
        "description": "",
        "operationId": "rewardsList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "firstIndex",
            "in": "path",
            "description": "First index",
            "required": true,
            "type": "string",
            "x-example": "1"
          },
          {
            "name": "lastIndex",
            "in": "path",
            "description": "Last index (optional, default is firstIndex + 99)",
            "required": true,
            "type": "string",
            "x-example": "10"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JSONRewardsInfo"
              }
            }
          }
        }
      }
    },
    "/mining/start": {
      "post": {
        "tags": [
          "Mining"
        ],
        "summary": "Start mining blocks with an account",
        "description": "",
        "operationId": "start2",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account ",
            "required": true,
            "type": "string",
            "x-example": "i am so secret"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Mining"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mining/start/{secretPhrase}": {
      "get": {
        "tags": [
          "Mining"
        ],
        "summary": "Start mining blocks with an account",
        "description": "",
        "operationId": "start",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase of the account ",
            "required": true,
            "type": "string",
            "x-example": "i am so secret"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Mining"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mining/stop": {
      "post": {
        "tags": [
          "Mining"
        ],
        "summary": "Stop mining blocks",
        "description": "",
        "operationId": "stop2",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, if ommitted will stop all mining activity)",
            "required": false,
            "type": "string",
            "x-example": "i am so secret"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Mining"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mining/stop/{secretPhrase}": {
      "get": {
        "tags": [
          "Mining"
        ],
        "summary": "Stop mining blocks",
        "description": "",
        "operationId": "stop",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase of the account (optional, if ommitted will stop all mining activity)",
            "required": true,
            "type": "string",
            "x-example": "i am so secret"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Mining"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/order/account/all/count/{account}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Counts all orders for an account (requires replicator)",
        "description": "",
        "operationId": "accountAllCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/order/account/all/{account}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all orders for an account (requires replicator)",
        "description": "",
        "operationId": "accountAll",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/account/asks/{account}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all ask orders by account (requires replicator)",
        "description": "",
        "operationId": "accountAsks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/account/bids/{account}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all bid orders by account (requires replicator)",
        "description": "",
        "operationId": "accountBids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/account/pair/asks/{account}/{currency}/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all ask orders by account and trading pair (requires replicator)",
        "description": "",
        "operationId": "accountPairAsks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/account/pair/bids/{account}/{currency}/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all bid orders by account and trading pair (requires replicator)",
        "description": "",
        "operationId": "accountPairBids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/account/pair/count/{account}/{currency}/{asset}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Counts all orders for an account with currency and asset (requires replicator)",
        "description": "",
        "operationId": "order account pair count",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/account/pair/{account}/{currency}/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all orders for an account (requires replicator)",
        "description": "",
        "operationId": "order account pair",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose orders to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/ask/{order}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Finds an ask order by ID (requires replicator)",
        "description": "",
        "operationId": "ask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Ask order numeric id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        }
      }
    },
    "/order/asks/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all ask orders (requires replicator)",
        "description": "",
        "operationId": "asks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/bid/{order}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Finds an bid order by ID (requires replicator)",
        "description": "",
        "operationId": "bid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Bid order numeric id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        }
      }
    },
    "/order/bids/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all bid orders (requires replicator)",
        "description": "",
        "operationId": "bids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/cancel/ask": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel an existing ask asset order",
        "description": "",
        "operationId": "cancelAsk",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "formData",
            "description": "The order ID of the order being canceled",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/order/cancel/bid": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel an existing bid asset order",
        "description": "",
        "operationId": "cancelBid",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "formData",
            "description": "The order ID of the order being canceled",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/order/pair/asks/count/{currency}/{asset}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Counts all ask orders by trading pair",
        "description": "",
        "operationId": "pairAsksCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/pair/asks/{currency}/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all ask orders by trading pair (requires replicator)",
        "description": "",
        "operationId": "pairAsks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/pair/bids/count/{currency}/{asset}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Counts all bid orders by trading pair",
        "description": "",
        "operationId": "pairBidsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/pair/bids/{currency}/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Lists all bid orders by trading pair",
        "description": "",
        "operationId": "pairBids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/order/place/ask": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Place an asset ask(sell) order",
        "description": "",
        "operationId": "placeAsk",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "formData",
            "description": "Currency numeric id of the currency you will receive",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "formData",
            "description": "Asset numeric id of the asset you are selling",
            "required": true,
            "type": "string"
          },
          {
            "name": "quantity",
            "in": "formData",
            "description": "The amount (in QNT) of the asset being sold",
            "required": true,
            "type": "string"
          },
          {
            "name": "price",
            "in": "formData",
            "description": "The ask price. If currency is HEAT in HQT (1 HQT equals 0.00000001 HEAT), if currency is an asset the price QNT",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiration",
            "in": "formData",
            "description": "Order expiration timestamp",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/order/place/bid": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Place an asset bid order",
        "description": "",
        "operationId": "placeBid",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "formData",
            "description": "Currency numeric id of the currency you will be paying with",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "formData",
            "description": "Asset numeric id of the asset you are buying",
            "required": true,
            "type": "string"
          },
          {
            "name": "quantity",
            "in": "formData",
            "description": "The amount (in QNT) of the asset being bought",
            "required": true,
            "type": "string"
          },
          {
            "name": "price",
            "in": "formData",
            "description": "The bid price. If currency is HEAT in HQT (1 HQT equals 0.00000001 HEAT), if currency is an asset the price QNT",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiration",
            "in": "formData",
            "description": "Order expiration timestamp",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/peer/add/{address}": {
      "get": {
        "tags": [
          "Peers"
        ],
        "summary": "Add a peer to the list of known peers and attempt to connect to it",
        "description": "",
        "operationId": "add new peer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "IP address or domain name of the peer (plus optional port)",
            "required": true,
            "type": "string",
            "x-example": "http://1.2.3.4"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Peer"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/peer/all/{state}": {
      "get": {
        "tags": [
          "Peers"
        ],
        "summary": "Get all peers",
        "description": "",
        "operationId": "allPeers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "description": "If provided filters on peer state, 0 for NON_CONNECTED, 1 for CONNECTED, 2 for DISCONNECTED or 3 for ALL",
            "required": true,
            "type": "string",
            "default": "3",
            "enum": [
              "0",
              "1",
              "2",
              "3"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Peer"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/peer/blacklist/{address}": {
      "get": {
        "tags": [
          "Peers"
        ],
        "summary": "Blacklist a peer for the default blacklisting period",
        "description": "",
        "operationId": "blacklist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "IP address or domain name of the peer (plus optional port)",
            "required": true,
            "type": "string",
            "x-example": "http://1.2.3.4"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Peer"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/peer/get/{address}": {
      "get": {
        "tags": [
          "Peers"
        ],
        "summary": "Get information about a given peer",
        "description": "",
        "operationId": "peer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "IP address or domain name of the peer (plus optional port)",
            "required": true,
            "type": "string",
            "x-example": "http://1.2.3.4"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Peer"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/register/now/{publicKey}/{captcha}/{name}/{isprivate}/{signature}": {
      "get": {
        "tags": [
          "Register"
        ],
        "summary": "Register a new account",
        "description": "",
        "operationId": "add",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "publicKey",
            "in": "path",
            "description": "Public key",
            "required": true,
            "type": "string"
          },
          {
            "name": "captcha",
            "in": "path",
            "description": "Captcha",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          },
          {
            "name": "isprivate",
            "in": "path",
            "description": "If true assign a private name, public otherwise",
            "required": true,
            "type": "string"
          },
          {
            "name": "signature",
            "in": "path",
            "description": "User signature required to assign the name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/search/accounts/count/{query}": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Count account ids, public keys and email ids",
        "description": "",
        "operationId": "accountsCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Query text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/search/accounts/{query}/{from}/{to}": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search account ids, public keys and email ids",
        "description": "",
        "operationId": "accounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Query text",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        }
      }
    },
    "/tools/SHA256": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Creates a SHA256 hash of the input, input could be plain UTF-8 text or if isText=true can be binary data encoded as HEX",
        "description": "",
        "operationId": "hashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "isText",
            "in": "formData",
            "description": "Indicates if the input is to be considered UTF-8 text or if its HEX encoded binary data",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Input data for the hashing function",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SHA256Hash"
            }
          }
        }
      }
    },
    "/tools/SHA256/{isText}/{message}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Creates a SHA256 hash of the input, input could be plain UTF-8 text or if isText=true can be binary data encoded as HEX",
        "description": "",
        "operationId": "hash",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "isText",
            "in": "path",
            "description": "Indicates if the input is to be considered UTF-8 text or if its HEX encoded binary data",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "message",
            "in": "path",
            "description": "Input data for the hashing function",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SHA256Hash"
            }
          }
        }
      }
    },
    "/tools/aes/decrypt": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Encrypt a message using AES without sending it",
        "description": "",
        "operationId": "decryptPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipient",
            "in": "formData",
            "description": "Either the numeric account id of the recipient, or the recipient public key as HEX encoded string",
            "required": true,
            "type": "string",
            "x-example": "29c67e8284c4f140d9aefc449c9b92af653e75f3fff8e13a3308cdc3c403ae5e"
          },
          {
            "name": "data",
            "in": "formData",
            "description": "AES-encrypted data as HEX string",
            "required": true,
            "type": "string"
          },
          {
            "name": "nonce",
            "in": "formData",
            "description": "The unique nonce associated with the encrypted data",
            "required": true,
            "type": "string"
          },
          {
            "name": "isText",
            "in": "formData",
            "description": "Indicates if the message is to be considered UTF-8 text or if its HEX encoded binary data",
            "required": true,
            "type": "string",
            "default": "true",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "uncompress",
            "in": "formData",
            "description": "If `true` the encrypted data is GZIP compressed and thus needs to be decompressed",
            "required": true,
            "type": "string",
            "default": "false",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the sender",
            "required": true,
            "type": "string",
            "x-example": "a much to weak passphrase"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecryptedData"
            }
          }
        }
      }
    },
    "/tools/aes/decrypt/{recipient}/{data}/{nonce}/{isText}/{uncompress}/{secretPhrase}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Encrypt a message using AES without sending it",
        "description": "",
        "operationId": "decrypt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipient",
            "in": "path",
            "description": "Either the numeric account id of the recipient, or the recipient public key as HEX encoded string",
            "required": true,
            "type": "string",
            "x-example": "29c67e8284c4f140d9aefc449c9b92af653e75f3fff8e13a3308cdc3c403ae5e"
          },
          {
            "name": "data",
            "in": "path",
            "description": "AES-encrypted data as HEX string",
            "required": true,
            "type": "string"
          },
          {
            "name": "nonce",
            "in": "path",
            "description": "The unique nonce associated with the encrypted data",
            "required": true,
            "type": "string"
          },
          {
            "name": "isText",
            "in": "path",
            "description": "Indicates if the message is to be considered UTF-8 text or if its HEX encoded binary data",
            "required": true,
            "type": "string",
            "default": "true",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "uncompress",
            "in": "path",
            "description": "If `true` the encrypted data is GZIP compressed and thus needs to be decompressed",
            "required": true,
            "type": "string",
            "default": "false",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase of the sender",
            "required": true,
            "type": "string",
            "x-example": "a much to weak passphrase"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecryptedData"
            }
          }
        }
      }
    },
    "/tools/aes/decryptMessageBytes/{messageBytesHex}/{recipientPublicKey}/{secretPhrase}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Decrypt message bytes using AES (use with payments API)",
        "description": "",
        "operationId": "decryptMessageBytes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "messageBytesHex",
            "in": "path",
            "description": "Message bytes HEX encoded",
            "required": true,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "path",
            "description": "Recipient public key HEX encoded",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "Secret phrase UTF-8 (WARNING! your secret phrase will be sent to the server)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DecryptedData"
            }
          }
        }
      }
    },
    "/tools/aes/encrypt": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Decrypt a message using AES",
        "description": "",
        "operationId": "encryptPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipient",
            "in": "formData",
            "description": "Either the numeric account id of the recipient, or the recipient public key as HEX encoded string",
            "required": true,
            "type": "string",
            "x-example": "29c67e8284c4f140d9aefc449c9b92af653e75f3fff8e13a3308cdc3c403ae5e"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed and converted into a 1000 byte maximum bytecode then encrypted using AES",
            "required": true,
            "type": "string",
            "x-example": "http://heatledger.com | when scale matters"
          },
          {
            "name": "isText",
            "in": "formData",
            "description": "Indicates if the message is to be considered UTF-8 text or if its HEX encoded binary data",
            "required": true,
            "type": "string",
            "default": "true",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "compress",
            "in": "formData",
            "description": "If `true` the encrypted data is GZIP compressed",
            "required": true,
            "type": "string",
            "default": "false",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the sender",
            "required": true,
            "type": "string",
            "x-example": "a much to weak passphrase"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EncryptedData"
            }
          }
        }
      }
    },
    "/tools/aes/encrypt/{recipient}/{message}/{isText}/{compress}/{secretPhrase}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Encrypt a message using AES without sending it",
        "description": "",
        "operationId": "encrypt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipient",
            "in": "path",
            "description": "Either the numeric account id of the recipient, or the recipient public key as HEX encoded string",
            "required": true,
            "type": "string",
            "x-example": "29c67e8284c4f140d9aefc449c9b92af653e75f3fff8e13a3308cdc3c403ae5e"
          },
          {
            "name": "message",
            "in": "path",
            "description": "Either UTF-8 text or a string of hex digits to be compressed and converted into a 1000 byte maximum bytecode then encrypted using AES",
            "required": true,
            "type": "string",
            "x-example": "http://heatledger.com | when scale matters"
          },
          {
            "name": "isText",
            "in": "path",
            "description": "Indicates if the message is to be considered UTF-8 text or if its HEX encoded binary data",
            "required": true,
            "type": "string",
            "default": "true",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "compress",
            "in": "path",
            "description": "If `true` the encrypted data is GZIP compressed",
            "required": true,
            "type": "string",
            "default": "false",
            "x-example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase of the sender",
            "required": true,
            "type": "string",
            "x-example": "a much to weak passphrase"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EncryptedData"
            }
          }
        }
      }
    },
    "/tools/assign/name/signature": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Creates a signature to use for assigning public or private account name",
        "description": "",
        "operationId": "assignPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fullNameUTF8",
            "in": "formData",
            "description": "The account name you wish to assign",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret phrase of the account we are assigning the name to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/tools/assign/name/signature/{fullNameUTF8}/{secretPhrase}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Creates a signature to use for assigning public or private account name",
        "description": "",
        "operationId": "assign",
        "parameters": [
          {
            "name": "fullNameUTF8",
            "in": "path",
            "description": "The account name you wish to assign",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret phrase of the account we are assigning the name to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/tools/hallmark/decode/{hallmark}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Decode a node hallmark",
        "description": "",
        "operationId": "decode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hallmark",
            "in": "path",
            "description": "The hallmark value",
            "required": true,
            "type": "string",
            "x-example": "e927a0ac1cf729c71980c4fc7c2c098d5109ba642babe3931ed2af4b49968f430e00686561746c65646765722e636f6dc8000000659e3301cec749a1201eda199b0ede8dd2d83aa7ab71fdd38af0087179b7b1ddb1d87dcc0421176e73c439e23b81a03a0d3e42426db86d51dc71260375a4463e44604c6d10"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Hallmark"
            }
          }
        }
      }
    },
    "/tools/hallmark/encode/{host}/{weight}/{date}/{secretPhrase}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Generates a node hallmark",
        "description": "",
        "operationId": "encode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "host",
            "in": "path",
            "description": "IP address or domain name of the node",
            "required": true,
            "type": "string",
            "x-example": "heatledger.com"
          },
          {
            "name": "weight",
            "in": "path",
            "description": "The weight to assign to the node",
            "required": true,
            "type": "string",
            "x-example": "200"
          },
          {
            "name": "date",
            "in": "path",
            "description": "The current date in YYYY-MM-DD format",
            "required": true,
            "type": "string",
            "x-example": "2016-01-01"
          },
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase for the account that will be hallmarked on the node",
            "required": true,
            "type": "string",
            "x-example": "top secret phrase"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HallmarkResponse"
            }
          }
        }
      }
    },
    "/tools/id/{secretPhrase}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Calculates an account id from a secretphrase, result is an unsigned long",
        "description": "",
        "operationId": "id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase",
            "required": true,
            "type": "string",
            "x-example": "top secret phrase"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/tools/publickey/{secretPhrase}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Calculates a publickey from a secretphrase, result is a HEX string",
        "description": "",
        "operationId": "publickey",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "secretPhrase",
            "in": "path",
            "description": "The secret passphrase",
            "required": true,
            "type": "string",
            "x-example": "top secret phrase"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/tools/telemetry/balancesHash/{fromHeight}/{toHeight}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Peer hashes of all balances and hashes of block balances in heights range. 0 means equality or mismatch is unknown",
        "description": "",
        "operationId": "balancesHashes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromHeight",
            "in": "path",
            "description": "from height",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "toHeight",
            "in": "path",
            "description": "from height",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/tools/telemetry/balancesHash/{height}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Peer hash of all balances and hash of block balances at height. 0 means the hash is not calculated",
        "description": "",
        "operationId": "balances hashes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "At height",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Value"
            }
          }
        }
      }
    },
    "/tools/telemetry/forks": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Info about happened forks",
        "description": "",
        "operationId": "forksTelemetry",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeerTelemetry"
              }
            }
          }
        }
      }
    },
    "/tools/telemetry/health": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Indicators to estimate server health to compare to other servers",
        "description": "",
        "operationId": "healthState",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeerTelemetry"
              }
            }
          }
        }
      }
    },
    "/tools/telemetry/peers": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Peers telemetry data. Balances equality means 0 - mismatch, 1 - equals, 2 - unknown",
        "description": "",
        "operationId": "peersTelemetry",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeerTelemetry"
              }
            }
          }
        }
      }
    },
    "/tools/telemetry/peers/rejections/{scope}": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Peers rejections",
        "description": "",
        "operationId": "peersRejections",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Possible values: 'all' - returns all rejections, 'last' returns only last rejections for each peer",
            "required": true,
            "type": "string",
            "default": "all",
            "x-example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeerRejection"
              }
            }
          }
        }
      }
    },
    "/tools/telemetry/peers/state": {
      "get": {
        "tags": [
          "Tools"
        ],
        "summary": "Peers state",
        "description": "",
        "operationId": "peersState",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeerStateIndicator"
              }
            }
          }
        }
      }
    },
    "/trade/account/count/{account}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Counts all trades for an account (requires replicator)",
        "description": "",
        "operationId": "accountCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose trades to list",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/trade/account/pair/count/{account}/{currency}/{asset}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Counts account trades for a trading pair (requires replicator)",
        "description": "",
        "operationId": "trade account pair count",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose trades to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/trade/account/pair/{account}/{currency}/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Lists account trades for a trading pair (requires replicator)",
        "description": "",
        "operationId": "trade account pair",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose trades to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        }
      }
    },
    "/trade/account/{account}/{propertiesAccount}/{propertiesProtocol}/{from}/{to}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Lists all trades for an account (requires replicator)",
        "description": "",
        "operationId": "accountTrades",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account whose trades to list",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertiesAccount",
            "in": "path",
            "description": "Asset properties account id determines whose asset properties you want included in the result, a value of 0 means the asset issuer",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "propertiesProtocol",
            "in": "path",
            "description": "Asset properties protocol, a value of 0 means not to include asset properties in the result",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        }
      }
    },
    "/trade/all/{from}/{to}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Lists all trades for all trading pairs (requires replicator)",
        "description": "",
        "operationId": "all",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        }
      }
    },
    "/trade/ask/count/{order}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Counts trades for an asset order (requires replicator)",
        "description": "",
        "operationId": "askTradesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Ask order ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/trade/ask/{order}/{from}/{to}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Lists trades for an ask order (requires replicator)",
        "description": "",
        "operationId": "askTrades",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Ask order ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        }
      }
    },
    "/trade/bid/count/{order}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Counts trades for an asset order (requires replicator)",
        "description": "",
        "operationId": "bidTradesCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Bid order ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/trade/bid/{order}/{from}/{to}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Lists trades for an bid order (requires replicator)",
        "description": "",
        "operationId": "bidTrades",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Bid order ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        }
      }
    },
    "/trade/count/{currency}/{asset}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Counts all trades for a trading pair (requires replicator)",
        "description": "",
        "operationId": "tradeCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Count"
            }
          }
        }
      }
    },
    "/trade/{ask}/{bid}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Find trade by ask order id and bid order id (requires replicator)",
        "description": "",
        "operationId": "trade",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ask",
            "in": "path",
            "description": "Ask order numeric id",
            "required": true,
            "type": "string"
          },
          {
            "name": "bid",
            "in": "path",
            "description": "Bid order numeric id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Trade"
            }
          }
        }
      }
    },
    "/trade/{currency}/{asset}/{from}/{to}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Lists all trades for a trading pair (requires replicator)",
        "description": "",
        "operationId": "trades",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "description": "Currency ID (0 indicates HEAT, every other number indicates an asset)",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "From index",
            "required": true,
            "type": "string",
            "default": "0"
          },
          {
            "name": "to",
            "in": "path",
            "description": "To index",
            "required": true,
            "type": "string",
            "default": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        }
      }
    },
    "/tx/broadcast": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Broadcast a transaction to the network",
        "description": "",
        "operationId": "broadcast",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionBytes",
            "in": "formData",
            "description": "The bytecode of a signed transaction (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "transactionJSON",
            "in": "formData",
            "description": "The transaction object (optional if transactionBytes provided)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Broadcast"
            }
          }
        }
      }
    },
    "/tx/check": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get a transaction object given a (signed or unsigned) transaction bytecode, or re-parse a transaction object. Verify the signature. Check applicability of transaction at moment",
        "description": "",
        "operationId": "checkApplicability",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionJSON",
            "in": "formData",
            "description": "The transaction object (optional if transactionBytes is included)",
            "required": false,
            "type": "string"
          },
          {
            "name": "transactionBytes",
            "in": "formData",
            "description": "The signed or unsigned bytecode of the transaction (optional)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionVerify"
            }
          }
        }
      }
    },
    "/tx/create": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create and optionally sign and broadcast any type of transaction from a JSON document",
        "description": "<code>// Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT<br>fee: string,<br><br>// The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum<br>deadline: number,<br><br>// The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)<br>secretPhrase: string,<br><br>// The public key of the account (optional if secretPhrase provided)<br>publicKey: string,<br><br>// The account ID of the recipient (optional)<br>recipient: string,<br><br>// The public key of the receiving account (optional, enhances security of a new account)<br>recipientPublicKey: string,<br><br>// Set to false to prevent broadcasting the transaction to the network (optional)<br>broadcast: boolean,<br><br>// Either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte<br>message: string,<br><br>// False if the message is a hex string, otherwise the message is text (optional)<br>messageIsText: boolean,<br><br>// Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false) and converted into a bytecode with a maximum length of one kilobyte<br>messageToEncrypt: string,<br><br>// False if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional)<br>messageToEncryptIsText: string,<br><br>// Already encrypted data which overrides messageToEncrypt if provided (optional)<br>encryptedMessageData: string,<br><br>// A unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided)<br>encryptedMessageNonce: string,<br><br>// Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional)<br>messageToEncryptToSelf: string,<br><br>// False if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional)<br>messageToEncryptToSelfIsText: boolean, <br><br>// Already encrypted data which overrides messageToEncryptToSelf if provided (optional)<br>encryptToSelfMessageData: string,<br><br>// A unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided)<br>public String encryptToSelfMessageNonce;<br><br>// 8 byte numeric name hash (optional, announces non-public name to your account)<br>privateNameAnnouncement: string,<br><br>// Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)<br>publicNameAnnouncement: string, <br><br>// 8 byte numeric name hash (optional, assigns non-public name to recipient account)<br>privateNameAssignment: string,<br><br>// Private name assignment signature (required when privateNameAssignment was given, see /tools/privatename/signature for details)<br>privateNameAssignmentSignature: string,<br><br>// Account name, UTF-8 min length 3, max length 100 (optional, assigns public name to recipient account)<br>publicNameAssignment: string,<br><br>// Public name assignment signature (required when publicNameAssignment was given, see /tools/publicname/signature for details)<br>publicNameAssignmentSignature: string,<br><br>EffectiveBalanceLeasing: {<br>&nbsp;&nbsp;&nbsp;period: number<br>}<br>AskOrderCancellation: {<br>&nbsp;&nbsp;&nbsp;orderId: string<br>}<br>BidOrderCancellation: {<br>&nbsp;&nbsp;&nbsp;orderId: string<br>}<br>AskOrderPlacement: {<br>&nbsp;&nbsp;&nbsp;currencyId: string,<br>&nbsp;&nbsp;&nbsp;assetId: string, <br>&nbsp;&nbsp;&nbsp;quantity: string, <br>&nbsp;&nbsp;&nbsp;price: string, <br>&nbsp;&nbsp;&nbsp;expiration: number<br>}<br>BidOrderPlacement: {<br>&nbsp;&nbsp;&nbsp;currencyId: string,<br>&nbsp;&nbsp;&nbsp;assetId: string, <br>&nbsp;&nbsp;&nbsp;quantity: string, <br>&nbsp;&nbsp;&nbsp;price: string, <br>&nbsp;&nbsp;&nbsp;expiration: number<br>}<br>AssetIssuance: {<br>&nbsp;&nbsp;&nbsp;descriptionUrl: string, <br>&nbsp;&nbsp;&nbsp;descriptionHash: string, <br>&nbsp;&nbsp;&nbsp;quantityQNT: string, <br>&nbsp;&nbsp;&nbsp;decimals: number, <br>&nbsp;&nbsp;&nbsp;dillutable: boolean<br>}<br>AssetIssueMore: {<br>&nbsp;&nbsp;&nbsp;assetId: string, <br>&nbsp;&nbsp;&nbsp;quantity: string<br>}<br>AssetTransfer: {<br>&nbsp;&nbsp;&nbsp;assetId: string,<br>&nbsp;&nbsp;&nbsp;quantity: string<br>}<br>OrdinaryPayment: {<br>&nbsp;&nbsp;&nbsp;amountHQT: string,<br>}<br>ArbitraryMessage: {}<br></code>",
        "operationId": "create",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "formData",
            "description": "JSON document as UTF-8 string",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/tx/fullhash": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Calculate the full hash of a transaction.",
        "description": "",
        "operationId": "fullhash",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "unsignedTransactionJSON",
            "in": "formData",
            "description": "The unsigned transaction JSON object (optional if unsignedTransactionBytes is included)",
            "required": false,
            "type": "string"
          },
          {
            "name": "unsignedTransactionBytes",
            "in": "formData",
            "description": "The unsigned bytes of a transaction (optional if unsignedTransactionJSON is included)",
            "required": false,
            "type": "string"
          },
          {
            "name": "signatureHash",
            "in": "formData",
            "description": "A SHA-256 hash of the transaction signature",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullHash"
            }
          }
        }
      }
    },
    "/tx/internetaddress": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Register internet address for sender account (the host of node on which account is forging)",
        "description": "",
        "operationId": "registerInternetAddress",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "internetAddress",
            "in": "formData",
            "description": "Internet address",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/tx/lease": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Lease the entire guaranteed balance of HEAT to another account, after 1440 confirmations",
        "description": "",
        "operationId": "lease",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "period",
            "in": "formData",
            "description": "The lease period (in number of blocks, 1440 minimum, 300000 maximum)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/tx/parse": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get a transaction object given a (signed or unsigned) transaction bytecode, or re-parse a transaction object. Verify the signature",
        "description": "",
        "operationId": "parse",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "transactionJSON",
            "in": "formData",
            "description": "The transaction object (optional if transactionBytes is included)",
            "required": false,
            "type": "string"
          },
          {
            "name": "transactionBytes",
            "in": "formData",
            "description": "The signed or unsigned bytecode of the transaction (optional)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionVerify"
            }
          }
        }
      }
    },
    "/tx/sendmessage": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create an Arbitrary Message transaction",
        "description": "",
        "operationId": "sendMessage",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageIsText",
            "in": "formData",
            "description": "False if the message is a hex string, otherwise the message is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "messageToEncrypt",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false) and converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptIsText",
            "in": "formData",
            "description": "False if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptedMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncrypt if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptedMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelf",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelfIsText",
            "in": "formData",
            "description": "False if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptToSelfMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncryptToSelf if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptToSelfMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignment",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, assigns non-public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignmentSignature",
            "in": "formData",
            "description": "Private name assignment signature (required when privateNameAssignment was given, see /tools/privatename/signature for details)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignment",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, assigns public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignmentSignature",
            "in": "formData",
            "description": "Public name assignment signature (required when publicNameAssignment was given, see /tools/publicname/signature for details)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/tx/sendmoney": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Send HEAT to an account",
        "description": "",
        "operationId": "sendMoney",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amount",
            "in": "formData",
            "description": "Amount in HQT (1 HQT equals 0.00000001 HEAT)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fee",
            "in": "formData",
            "description": "Transaction fee in HQT (1 HQT equals 0.00000001 HEAT) default fee is 0.01 HEAT",
            "required": true,
            "type": "string",
            "default": "1000000"
          },
          {
            "name": "deadline",
            "in": "formData",
            "description": "The deadline (in minutes) for the transaction to be confirmed, 1440 minutes maximum",
            "required": true,
            "type": "string",
            "default": "1440"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "The secret passphrase of the account (optional, but transaction neither signed nor broadcast if omitted)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKey",
            "in": "formData",
            "description": "The public key of the account (optional if secretPhrase provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipient",
            "in": "formData",
            "description": "The account ID of the recipient (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientPublicKey",
            "in": "formData",
            "description": "The public key of the receiving account (optional, enhances security of a new account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "broadcast",
            "in": "formData",
            "description": "Set to false to prevent broadcasting the transaction to the network (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "privateNameAnnouncement",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, announces non-public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAnnouncement",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, announces public name to your account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "message",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageIsText",
            "in": "formData",
            "description": "False if the message is a hex string, otherwise the message is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "messageToEncrypt",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false) and converted into a bytecode with a maximum length of one kilobyte",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptIsText",
            "in": "formData",
            "description": "False if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptedMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncrypt if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptedMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelf",
            "in": "formData",
            "description": "Either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageToEncryptToSelfIsText",
            "in": "formData",
            "description": "False if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional)",
            "required": false,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "name": "encryptToSelfMessageData",
            "in": "formData",
            "description": "Already encrypted data which overrides messageToEncryptToSelf if provided (optional)",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptToSelfMessageNonce",
            "in": "formData",
            "description": "A unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignment",
            "in": "formData",
            "description": "8 byte numeric name hash (optional, assigns non-public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "privateNameAssignmentSignature",
            "in": "formData",
            "description": "Private name assignment signature (required when privateNameAssignment was given, see /tools/privatename/signature for details)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignment",
            "in": "formData",
            "description": "Account name, UTF-8 min length 3, max length 100 (optional, assigns public name to recipient account)",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicNameAssignmentSignature",
            "in": "formData",
            "description": "Public name assignment signature (required when publicNameAssignment was given, see /tools/publicname/signature for details)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TransactionCreate"
            }
          }
        }
      }
    },
    "/tx/sign": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Calculates the full hash, signature hash, and transaction ID of an unsigned transaction",
        "description": "",
        "operationId": "sign",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "unsignedTransactionJSON",
            "in": "formData",
            "description": "The transactionJSON field of the transaction, without a signature subfield",
            "required": false,
            "type": "string"
          },
          {
            "name": "unsignedTransactionBytes",
            "in": "formData",
            "description": "The unsignedTransactionBytes field of the transaction (optional, if unsignedTransactionJSON provided)",
            "required": false,
            "type": "string"
          },
          {
            "name": "secretPhrase",
            "in": "formData",
            "description": "Secret passphrase of the signing account",
            "required": true,
            "type": "string"
          },
          {
            "name": "validate",
            "in": "formData",
            "description": "False to skip validation of the transaction bytes being signed (useful on nodes where the full blockchain is not downloaded)",
            "required": true,
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SignResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "balance",
        "currentLeasingHeightFrom",
        "currentLeasingHeightTo",
        "currentLessee",
        "currentLesseeName",
        "effectiveBalance",
        "guaranteedBalance",
        "id",
        "keyHeight",
        "nextLeasingHeightFrom",
        "nextLeasingHeightTo",
        "nextLessee",
        "nextLesseeName",
        "publicKey",
        "publicName",
        "unconfirmedBalance"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Numeric account id"
        },
        "keyHeight": {
          "type": "integer",
          "format": "int32",
          "description": "Height at which the public key was registered"
        },
        "publicKey": {
          "type": "string",
          "description": "Account public key in HEX format"
        },
        "balance": {
          "type": "string",
          "description": "Account balance in HQT (1 HQT equals 0.00000001 HEAT)"
        },
        "unconfirmedBalance": {
          "type": "string",
          "description": "Unconfirmed account balance in HQT (1 HQT equals 0.00000001 HEAT)"
        },
        "effectiveBalance": {
          "type": "string",
          "description": "Effective account balance in HQT (1 HQT equals 0.00000001 HEAT)"
        },
        "guaranteedBalance": {
          "type": "string",
          "description": "Guaranteed account balance in HQT (1 HQT equals 0.00000001 HEAT)"
        },
        "currentLessee": {
          "type": "string",
          "description": "Account id of the lessee"
        },
        "currentLesseeName": {
          "type": "string",
          "description": "Public name of the current lessee"
        },
        "currentLeasingHeightFrom": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the lease starts"
        },
        "currentLeasingHeightTo": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the lease ends"
        },
        "nextLessee": {
          "type": "string",
          "description": "Account id of the next lessee"
        },
        "nextLesseeName": {
          "type": "string",
          "description": "Public name of the next lessee"
        },
        "nextLeasingHeightFrom": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the next lease starts"
        },
        "nextLeasingHeightTo": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the next lease ends"
        },
        "lessors": {
          "type": "array",
          "description": "All current and future lessors",
          "items": {
            "$ref": "#/definitions/Lessor"
          }
        },
        "publicName": {
          "type": "string",
          "description": "Account public name"
        }
      },
      "description": "Account class",
      "xml": {
        "name": "Account"
      }
    },
    "JSONAssetProtocol1": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "string"
        },
        "decimals": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "AccountInternetAddress": {
      "type": "object",
      "required": [
        "account",
        "height",
        "internetAddress"
      ],
      "properties": {
        "account": {
          "type": "string",
          "description": "The account id"
        },
        "internetAddress": {
          "type": "string",
          "description": "Registered host for account"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height of registration"
        }
      },
      "description": "AccountInternetAddress class",
      "xml": {
        "name": "AccountInternetAddress"
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "transaction": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "recipient": {
          "type": "string"
        },
        "senderPrivateName": {
          "type": "string"
        },
        "recipientPrivateName": {
          "type": "string"
        },
        "senderPublicName": {
          "type": "string"
        },
        "recipientPublicName": {
          "type": "string"
        },
        "senderPublicKey": {
          "type": "string"
        },
        "recipientPublicKey": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32"
        },
        "blockId": {
          "type": "string"
        },
        "messageBytes": {
          "type": "string"
        },
        "messageIsText": {
          "type": "boolean",
          "default": false
        },
        "messageIsEncrypted": {
          "type": "boolean",
          "default": false
        },
        "messageIsEncryptedToSelf": {
          "type": "boolean",
          "default": false
        }
      },
      "description": "Generic Message class",
      "xml": {
        "name": "Message"
      }
    },
    "BlockCondensed": {
      "type": "object",
      "required": [
        "block",
        "generator",
        "generatorPublicName",
        "height",
        "numberOfTransactions",
        "popRewardHQT",
        "posRewardHQT",
        "timestamp",
        "totalAmountHQT",
        "totalFeeHQT",
        "transactions"
      ],
      "properties": {
        "totalAmountHQT": {
          "type": "string",
          "description": "The total amount in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block"
        },
        "generator": {
          "type": "string",
          "description": "The generating account number"
        },
        "generatorPublicName": {
          "type": "string",
          "description": "The generator public name"
        },
        "numberOfTransactions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of transactions in the block"
        },
        "totalFeeHQT": {
          "type": "string",
          "description": "The total fee in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block"
        },
        "block": {
          "type": "string",
          "description": "The block ID"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based block height"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block"
        },
        "posRewardHQT": {
          "type": "string",
          "description": "The total POS miner fee in HQT (1 HQT equals 0.00000001 HEAT)"
        },
        "popRewardHQT": {
          "type": "string",
          "description": "The total POP fee in HQT (1 HQT equals 0.00000001 HEAT)"
        },
        "transactions": {
          "type": "array",
          "description": "An array of transaction IDs or transaction objects (if includeTransactions provided, refer to Get Transaction for details)",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        }
      },
      "description": "BlockCondensed class",
      "xml": {
        "name": "BlockCondensed"
      }
    },
    "JSONStake": {
      "type": "object",
      "properties": {
        "generatorCount": {
          "type": "integer",
          "format": "int32"
        },
        "generatorStake": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JSONRewardsInfo": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "effectiveBalance": {
          "type": "string"
        },
        "totalRewards": {
          "type": "string"
        },
        "lastBlockTimestamp": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Count": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The count value"
        }
      },
      "description": "Generic Count class",
      "xml": {
        "name": "Count"
      }
    },
    "SHA256Hash": {
      "type": "object",
      "required": [
        "digest",
        "isText",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "The input data, could be either UTF-8 text or binary data encoded as HEX"
        },
        "isText": {
          "type": "boolean",
          "description": "Indicator if the the input is either text/utf-8 or binary data encoded as HEX",
          "default": false
        },
        "digest": {
          "type": "string",
          "description": "The hash value encoded as HEX string"
        }
      },
      "description": "SHA256Hash class",
      "xml": {
        "name": "SHA256Hash"
      }
    },
    "JSONAssetCertification": {
      "type": "object",
      "required": [
        "asset",
        "certified",
        "certifierAccount",
        "name",
        "symbol"
      ],
      "properties": {
        "asset": {
          "type": "string",
          "description": "Asset id"
        },
        "certified": {
          "type": "boolean",
          "description": "Certified status [true,false]",
          "default": false
        },
        "symbol": {
          "type": "string",
          "description": "Certified asset assigned symbol"
        },
        "name": {
          "type": "string",
          "description": "Certified asset assigned name"
        },
        "certifierAccount": {
          "type": "string",
          "description": "Certifier account id"
        }
      }
    },
    "Mining": {
      "type": "object",
      "properties": {
        "deadline": {
          "type": "integer",
          "format": "int64",
          "description": "The estimated time (in seconds since the last block) until the account will mine a block (startMining and getMining only)"
        },
        "hitTime": {
          "type": "integer",
          "format": "int32",
          "description": "The estimated time (in seconds since 24 november 2013 00:00 UTC) when the account will mine a block (startMining and getMining only)"
        },
        "remaining": {
          "type": "integer",
          "format": "int32",
          "description": "The deadline less the elapsed time since the last block (getInfo only)"
        },
        "foundAndStopped": {
          "type": "boolean",
          "description": "Is true if mining was stopped, false if mining was already stopped (stopMining only)",
          "default": false
        },
        "account": {
          "type": "string",
          "description": "The account number (getInfo only)"
        },
        "stopped": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of stopped miners (stopMining only)"
        }
      },
      "description": "Mining class",
      "xml": {
        "name": "Mining"
      }
    },
    "Trade": {
      "type": "object",
      "required": [
        "askOrder",
        "askOrderHeight",
        "asset",
        "bidOrder",
        "bidOrderHeight",
        "block",
        "buyer",
        "currency",
        "height",
        "isBuy",
        "price",
        "quantity",
        "seller",
        "timestamp"
      ],
      "properties": {
        "block": {
          "type": "string",
          "description": "The ID of the block that contains the trade (0 for unconfirmed trades)"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the block that contains the trade (0 for unconfirmed trades)"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The trade timestamp (in seconds since 24 november 2013 00:00 UTC)"
        },
        "currency": {
          "type": "string",
          "description": "The currency ID"
        },
        "asset": {
          "type": "string",
          "description": "The asset ID"
        },
        "askOrder": {
          "type": "string",
          "description": "The ask order ID"
        },
        "bidOrder": {
          "type": "string",
          "description": "The bid order ID"
        },
        "askOrderHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The ask order height (0 for unconfirmed orders)"
        },
        "bidOrderHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The bid order height (0 for unconfirmed orders)"
        },
        "seller": {
          "type": "string",
          "description": "Numeric ID of the seller account"
        },
        "sellerName": {
          "type": "string",
          "description": "Public name for seller account"
        },
        "buyer": {
          "type": "string",
          "description": "Numeric ID of the buyer account"
        },
        "buyerName": {
          "type": "string",
          "description": "Public name for buyer account"
        },
        "quantity": {
          "type": "string",
          "description": "The trade quantity (in QNT)"
        },
        "price": {
          "type": "string",
          "description": "The trade price (in QNT in case currency is an asset, in HQT in case currency is HEAT) (1 HQT equals 0.00000001 HEAT) "
        },
        "isBuy": {
          "type": "boolean",
          "description": "Wheter this is a BUY trade (false in case of a SELL trade)",
          "default": false
        },
        "currencyProperties": {
          "type": "string",
          "description": "Currency properties based on protocol and account id (blank for all but 'list account trades')"
        },
        "assetProperties": {
          "type": "string",
          "description": "Asset properties based on protocol and account id (blank for all but 'list account trades')"
        }
      },
      "description": "Trade class",
      "xml": {
        "name": "Trade"
      }
    },
    "AccountAsset": {
      "type": "object",
      "required": [
        "account",
        "asset",
        "quantity",
        "unconfirmedQuantity"
      ],
      "properties": {
        "account": {
          "type": "string",
          "description": "The account id"
        },
        "asset": {
          "type": "string",
          "description": "The asset id"
        },
        "quantity": {
          "type": "string",
          "description": "Confirmed balance"
        },
        "unconfirmedQuantity": {
          "type": "string",
          "description": "Unconfirmed balance"
        }
      },
      "description": "AccountAsset class",
      "xml": {
        "name": "AccountAsset"
      }
    },
    "SignResponse": {
      "type": "object",
      "required": [
        "fullHash",
        "signatureHash",
        "transaction",
        "transactionBytes",
        "verify"
      ],
      "properties": {
        "signatureHash": {
          "type": "string",
          "description": "A SHA-256 hash of the transaction signature, used in escrow transactions"
        },
        "verify": {
          "type": "boolean",
          "description": "Is true if the signature is verified, false if not",
          "default": false
        },
        "transactionBytes": {
          "type": "string",
          "description": "The signed transaction bytes"
        },
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction"
        },
        "transaction": {
          "type": "string",
          "description": "The transaction ID, derived from the fullHash"
        }
      },
      "description": "Sign Response class",
      "xml": {
        "name": "SignResponse"
      }
    },
    "Broadcast": {
      "type": "object",
      "required": [
        "fullHash",
        "transaction"
      ],
      "properties": {
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction"
        },
        "transaction": {
          "type": "string",
          "description": "The transaction ID"
        }
      },
      "description": "Broadcast response",
      "xml": {
        "name": "Broadcast"
      }
    },
    "AccountBalance": {
      "type": "object",
      "required": [
        "asset",
        "balance",
        "unconfirmedBalance",
        "virtualBalance"
      ],
      "properties": {
        "asset": {
          "type": "string",
          "description": "Asset ID, asset=0 is your HEAT balance all others are assets you own"
        },
        "balance": {
          "type": "string",
          "description": "Account balance in QNT (1 QNT equals 0.00000001)"
        },
        "unconfirmedBalance": {
          "type": "string",
          "description": "Unconfirmed balance in QNT (1 QNT equals 0.00000001)"
        },
        "virtualBalance": {
          "type": "string",
          "description": "Virtual balance in QNT (1 QNT equals 0.00000001)"
        },
        "properties": {
          "type": "string",
          "description": "Currency properties based on protocol and account id"
        },
        "decimals": {
          "type": "integer",
          "format": "int32",
          "description": "Currency decimals"
        }
      },
      "description": "AccountBalance class",
      "xml": {
        "name": "AccountBalance"
      }
    },
    "BlockMin": {
      "type": "object",
      "required": [
        "block",
        "blockSignature",
        "height",
        "numberOfTransactions",
        "timestamp"
      ],
      "properties": {
        "numberOfTransactions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of transactions in the block"
        },
        "blockSignature": {
          "type": "string",
          "description": "The 64-byte block signature (as HEX string)"
        },
        "block": {
          "type": "string",
          "description": "The block ID"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based block height"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block"
        }
      },
      "description": "Minimal Block class",
      "xml": {
        "name": "BlockMin"
      }
    },
    "TransactionExtended": {
      "type": "object",
      "required": [
        "amount",
        "attachment",
        "deadline",
        "ecBlockHeight",
        "ecBlockId",
        "fee",
        "fullHash",
        "height",
        "messageBytes",
        "messageIsEncrypted",
        "messageIsEncryptedToSelf",
        "messageIsText",
        "recipient",
        "recipientPublicKey",
        "recipientPublicName",
        "sender",
        "senderPublicKey",
        "senderPublicName",
        "signature",
        "signatureHash",
        "subtype",
        "timestamp",
        "transaction",
        "type",
        "version"
      ],
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction type"
        },
        "subtype": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction subtype"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The time (in seconds since 24 november 2013 00:00 UTC) of the transaction"
        },
        "deadline": {
          "type": "integer",
          "format": "int32",
          "description": "The deadline (in minutes) for the transaction to be confirmed"
        },
        "senderPublicKey": {
          "type": "string",
          "description": "The public key of the sending account for the transaction"
        },
        "recipient": {
          "type": "string",
          "description": "The account number of the recipient, if applicable"
        },
        "recipientPublicKey": {
          "type": "string",
          "description": "Recipient public key as HEX string"
        },
        "amount": {
          "type": "string",
          "description": "The amount in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "fee": {
          "type": "string",
          "description": "The fee in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "signature": {
          "type": "string",
          "description": "The digital signature of the transaction"
        },
        "signatureHash": {
          "type": "string",
          "description": "A SHA-256 hash of the transaction signature"
        },
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction"
        },
        "transaction": {
          "type": "string",
          "description": "The ID of the newly created transaction"
        },
        "attachment": {
          "type": "object",
          "description": "An object containing any additional data needed for the transaction, if applicable",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sender": {
          "type": "string",
          "description": "The account ID of the sender"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the block in the blockchain"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction version number"
        },
        "ecBlockId": {
          "type": "string",
          "description": "The economic clustering block ID"
        },
        "ecBlockHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The economic clustering block height"
        },
        "messageBytes": {
          "type": "string",
          "description": "The message bytes as HEX if any"
        },
        "messageIsText": {
          "type": "boolean",
          "description": "In case the message is a text message (binary otherwise)",
          "default": false
        },
        "messageIsEncrypted": {
          "type": "boolean",
          "description": "Message is encrypted",
          "default": false
        },
        "messageIsEncryptedToSelf": {
          "type": "boolean",
          "description": "Message is encrypted to self",
          "default": false
        },
        "senderPublicName": {
          "type": "string",
          "description": "Sender public name"
        },
        "recipientPublicName": {
          "type": "string",
          "description": "Recipient public name"
        }
      },
      "description": "Transaction Extended class",
      "xml": {
        "name": "TransactionExtended"
      }
    },
    "EncryptedData": {
      "type": "object",
      "required": [
        "data",
        "nonce"
      ],
      "properties": {
        "data": {
          "type": "string",
          "description": "Encrypted data encoded as HEX"
        },
        "nonce": {
          "type": "string",
          "description": "Nonce"
        }
      },
      "description": "EncryptedData class",
      "xml": {
        "name": "EncryptedData"
      }
    },
    "KeyStoreBundle": {
      "type": "object",
      "required": [
        "account",
        "key",
        "transaction",
        "value"
      ],
      "properties": {
        "account": {
          "type": "string",
          "description": "Account scope"
        },
        "key": {
          "type": "string",
          "description": "The key that identifies this entry"
        },
        "value": {
          "type": "string",
          "description": "The entry value"
        },
        "transaction": {
          "type": "string",
          "description": "Transaction id for transaction that last set this entry"
        }
      },
      "description": "Generic KeyStoreBundle class",
      "xml": {
        "name": "KeyStoreBundle"
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "account",
        "asset",
        "cancelled",
        "currency",
        "currentlyNotValid",
        "expiration",
        "height",
        "order",
        "price",
        "quantity",
        "transactionIndex",
        "type",
        "unconfirmed",
        "unconfirmedQuantity"
      ],
      "properties": {
        "order": {
          "type": "string",
          "description": "The ID of the order"
        },
        "currency": {
          "type": "string",
          "description": "The ID of the currency with which we are paying (BID order) or which we will be receiving (ASK order)"
        },
        "asset": {
          "type": "string",
          "description": "The ID of the asset being bought or sold"
        },
        "account": {
          "type": "string",
          "description": "The account number associated with the order"
        },
        "accountName": {
          "type": "string",
          "description": "The account name associated with the order"
        },
        "quantity": {
          "type": "string",
          "description": "The order quantity (in QNT)"
        },
        "unconfirmedQuantity": {
          "type": "string",
          "description": "the unconfirmed order quantity (in QNT)"
        },
        "price": {
          "type": "string",
          "description": "The order price (given in currency units, could be either HQT if currency is HEAT or QNT if currency is an asset)"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The block height of the order transaction"
        },
        "transactionIndex": {
          "type": "integer",
          "format": "int32",
          "description": "A zero-based index giving the order of the transaction in its block"
        },
        "type": {
          "type": "string",
          "description": "Order type, either `ask` or `bid`",
          "enum": [
            "ask",
            "bid"
          ]
        },
        "cancelled": {
          "type": "boolean",
          "description": "Indicates an unconfirmed cancellation is pending",
          "default": false
        },
        "unconfirmed": {
          "type": "boolean",
          "description": "This is an unconfirmed or pending order",
          "default": false
        },
        "expiration": {
          "type": "integer",
          "format": "int32",
          "description": "The expiration time (in seconds since 24 november 2013 00:00 UTC)"
        },
        "currentlyNotValid": {
          "type": "boolean",
          "description": "Order is currently not valid, but might become valid in the future",
          "default": false
        }
      },
      "description": "Order class",
      "xml": {
        "name": "Order"
      }
    },
    "ChartData": {
      "type": "object",
      "required": [
        "asset",
        "currency",
        "data",
        "timestamp",
        "window"
      ],
      "properties": {
        "currency": {
          "type": "string",
          "description": "Currency id"
        },
        "asset": {
          "type": "string",
          "description": "Asset id"
        },
        "window": {
          "type": "integer",
          "format": "int32",
          "description": "Window interval in seconds"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The genetation timestamp (in seconds since 24 november 2013 00:00 UTC)"
        },
        "data": {
          "type": "array",
          "description": "Array of chartdata entries, each entry is an array",
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "description": "Generic ChardData class",
      "xml": {
        "name": "ChartData"
      }
    },
    "DecryptedData": {
      "type": "object",
      "required": [
        "isText",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "Unencrypted data as either UTF-8 text or encoded as HEX (since binary)"
        },
        "isText": {
          "type": "boolean",
          "description": "Indicates if message holds UTF-8 or HEX encoded binary data",
          "default": false
        }
      },
      "description": "DecryptedData class",
      "xml": {
        "name": "DecryptedData"
      }
    },
    "TransactionUnconfirmed": {
      "type": "object",
      "required": [
        "amount",
        "attachment",
        "deadline",
        "ecBlockHeight",
        "ecBlockId",
        "fee",
        "fullHash",
        "height",
        "messageBytes",
        "messageIsEncrypted",
        "messageIsEncryptedToSelf",
        "messageIsText",
        "recipient",
        "recipientPublicKey",
        "sender",
        "senderPublicKey",
        "signature",
        "signatureHash",
        "subtype",
        "timestamp",
        "transaction",
        "type",
        "version"
      ],
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction type"
        },
        "subtype": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction subtype"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The time (in seconds since 24 november 2013 00:00 UTC) of the transaction"
        },
        "deadline": {
          "type": "integer",
          "format": "int32",
          "description": "The deadline (in minutes) for the transaction to be confirmed"
        },
        "senderPublicKey": {
          "type": "string",
          "description": "The public key of the sending account for the transaction"
        },
        "recipient": {
          "type": "string",
          "description": "The account number of the recipient, if applicable"
        },
        "recipientPublicKey": {
          "type": "string",
          "description": "Recipient public key as HEX string"
        },
        "amount": {
          "type": "string",
          "description": "The amount in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "fee": {
          "type": "string",
          "description": "The fee in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "signature": {
          "type": "string",
          "description": "The digital signature of the transaction"
        },
        "signatureHash": {
          "type": "string",
          "description": "A SHA-256 hash of the transaction signature"
        },
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction"
        },
        "transaction": {
          "type": "string",
          "description": "The ID of the newly created transaction"
        },
        "attachment": {
          "type": "object",
          "description": "An object containing any additional data needed for the transaction, if applicable",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sender": {
          "type": "string",
          "description": "The account ID of the sender"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the block in the blockchain"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction version number"
        },
        "ecBlockId": {
          "type": "string",
          "description": "The economic clustering block ID"
        },
        "ecBlockHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The economic clustering block height"
        },
        "messageBytes": {
          "type": "string",
          "description": "The message bytes as HEX if any"
        },
        "messageIsText": {
          "type": "boolean",
          "description": "In case the message is a text message (binary otherwise)",
          "default": false
        },
        "messageIsEncrypted": {
          "type": "boolean",
          "description": "Message is encrypted",
          "default": false
        },
        "messageIsEncryptedToSelf": {
          "type": "boolean",
          "description": "Message is encrypted to self",
          "default": false
        }
      },
      "description": "Unconfirmed Transaction class",
      "xml": {
        "name": "TransactionUnconfirmed"
      }
    },
    "Peer": {
      "type": "object",
      "required": [
        "address",
        "announcedAddress",
        "application",
        "blacklisted",
        "blacklistingCause",
        "blockchainHeight",
        "downloadedVolume",
        "lastUpdated",
        "platform",
        "shareAddress",
        "state",
        "uploadedVolume",
        "version",
        "weight"
      ],
      "properties": {
        "hallmark": {
          "type": "string",
          "description": "Hex string of the peer's hallmark, if it is defined"
        },
        "downloadedVolume": {
          "type": "integer",
          "format": "int64",
          "description": "Number of bytes downloaded by the peer"
        },
        "address": {
          "type": "string",
          "description": "IP address or DNS name of the peer"
        },
        "weight": {
          "type": "integer",
          "format": "int32",
          "description": "Peer's weight value"
        },
        "uploadedVolume": {
          "type": "integer",
          "format": "int64",
          "description": "Number of bytes uploaded by the peer"
        },
        "version": {
          "type": "string",
          "description": "Version of the software running on the peer"
        },
        "platform": {
          "type": "string",
          "description": "String representing the peer's platform"
        },
        "lastUpdated": {
          "type": "integer",
          "format": "int32",
          "description": "timestamp (in seconds since the genesis block) of the last peer status update"
        },
        "blacklisted": {
          "type": "boolean",
          "description": "True if the peer is blacklisted",
          "default": false
        },
        "blacklistingCause": {
          "type": "string",
          "description": "The cause of blacklisting (if blacklisted is true)"
        },
        "announcedAddress": {
          "type": "string",
          "description": "The name that the peer announced to the network (could be a DNS name, IP address, or any other string)"
        },
        "application": {
          "type": "string",
          "description": "The name of the software application"
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "description": "The state of the peer: 0 for NON_CONNECTED, 1 for CONNECTED, or 2 for DISCONNECTED"
        },
        "shareAddress": {
          "type": "boolean",
          "description": "True if the address is allowed to be shared with other peers",
          "default": false
        },
        "blockchainHeight": {
          "type": "integer",
          "format": "int32",
          "description": "Last known blockchain height"
        }
      },
      "description": "Peer class",
      "xml": {
        "name": "Peer"
      }
    },
    "Hallmark": {
      "type": "object",
      "required": [
        "account",
        "date",
        "host",
        "valid",
        "weight"
      ],
      "properties": {
        "valid": {
          "type": "boolean",
          "description": "True if host is less than 100 characters, weight > 0 and the embedded signature is verified",
          "default": false
        },
        "weight": {
          "type": "integer",
          "format": "int32",
          "description": "The weight assigned to the hallmark"
        },
        "host": {
          "type": "string",
          "description": "The IP address or domain name associated with the hallmark"
        },
        "account": {
          "type": "string",
          "description": "The account number associated with the hallmark"
        },
        "date": {
          "type": "string",
          "description": "The date the hallmark was created, in YYYY-MM-DD format"
        }
      },
      "description": "Hallmark class",
      "xml": {
        "name": "Hallmark"
      }
    },
    "Lessor": {
      "type": "object",
      "required": [
        "effectiveBalance",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Numeric account id"
        },
        "currentLessee": {
          "type": "string",
          "description": "Account id of the lessee"
        },
        "currentHeightFrom": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the lease starts,"
        },
        "currentHeightTo": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the lease completes"
        },
        "nextLessee": {
          "type": "string",
          "description": "Account id of the next lessee"
        },
        "nextHeightFrom": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the next lease starts"
        },
        "nextHeightTo": {
          "type": "integer",
          "format": "int32",
          "description": "Block height when the next lease completes"
        },
        "effectiveBalance": {
          "type": "string",
          "description": "Effective account balance in HQT (1 HQT equals 0.00000001 HEAT)"
        }
      },
      "description": "Lessor class",
      "xml": {
        "name": "Lessor"
      }
    },
    "AssetProperties": {
      "type": "object",
      "required": [
        "account",
        "accountPublicName",
        "asset",
        "decimals",
        "descriptionHash",
        "descriptionUrl",
        "dillutable",
        "properties",
        "propertiesAccount",
        "propertiesProtocol",
        "quantityQNT",
        "timestamp"
      ],
      "properties": {
        "account": {
          "type": "string",
          "description": "The number of the account that issued the asset"
        },
        "accountPublicName": {
          "type": "string",
          "description": "The account public name that issued the asset"
        },
        "asset": {
          "type": "string",
          "description": "The asset ID"
        },
        "quantityQNT": {
          "type": "string",
          "description": "The total asset quantity (in QNT) in existence"
        },
        "decimals": {
          "type": "string",
          "format": "byte",
          "description": "The number of decimal places used by the asset"
        },
        "descriptionUrl": {
          "type": "string",
          "description": "HTTP/HTTPS url pointing to the asset description file"
        },
        "descriptionHash": {
          "type": "string",
          "description": "SHA256 hash of description document contents as UTF-8 (hash is HEX string)"
        },
        "dillutable": {
          "type": "boolean",
          "description": "True in case new assets can later be issued by the asset issuer ",
          "default": false
        },
        "propertiesAccount": {
          "type": "string",
          "description": "Asset properties account"
        },
        "propertiesProtocol": {
          "type": "integer",
          "format": "int32",
          "description": "Asset properties protocol"
        },
        "properties": {
          "type": "string",
          "description": "Asset properties based on protocol and account id"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "Asset properties timestamp"
        }
      },
      "description": "AssetProperties class",
      "xml": {
        "name": "AssetProperties"
      }
    },
    "MessageContact": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "privateName": {
          "type": "string"
        },
        "publicName": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Generic MessageContact class",
      "xml": {
        "name": "MessageContact"
      }
    },
    "TransactionCreate": {
      "type": "object",
      "required": [
        "broadcasted",
        "transactionJSON",
        "unsignedTransactionBytes"
      ],
      "properties": {
        "signatureHash": {
          "type": "string",
          "description": "SHA-256 hash of the transaction signature (only when secretPhrase sent to server)"
        },
        "transaction": {
          "type": "string",
          "description": "The ID of the newly created transaction (only when secretPhrase sent to server)"
        },
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction (only when secretPhrase sent to server)"
        },
        "transactionBytes": {
          "type": "string",
          "description": "The signed transaction bytes (only when secretPhrase sent to server)"
        },
        "broadcasted": {
          "type": "boolean",
          "description": "True if the transaction was broadcast, false otherwise",
          "default": false
        },
        "transactionJSON": {
          "description": "A transaction object",
          "$ref": "#/definitions/Transaction"
        },
        "unsignedTransactionBytes": {
          "type": "string",
          "description": "The unsigned transaction bytes as HEX string"
        }
      },
      "description": "Create transaction response",
      "xml": {
        "name": "TransactionCreate"
      }
    },
    "HallmarkResponse": {
      "type": "object",
      "required": [
        "hallmark"
      ],
      "properties": {
        "hallmark": {
          "type": "string",
          "description": "The hallmark hex string"
        }
      },
      "description": "Hallmark class",
      "xml": {
        "name": "HallmarkResponse"
      }
    },
    "Fees": {
      "type": "object",
      "properties": {
        "arbitraryMessageFee": {
          "type": "string"
        },
        "ordinaryPaymentFee": {
          "type": "string"
        },
        "orderCancellationFee": {
          "type": "string"
        },
        "orderPlacementFee": {
          "type": "string"
        },
        "assetTransferFee": {
          "type": "string"
        }
      },
      "description": "Fees class",
      "xml": {
        "name": "Fees"
      }
    },
    "Market": {
      "type": "object",
      "required": [
        "askOrderTotal",
        "asset",
        "bidOrderTotal",
        "currency",
        "hr24AssetVolume",
        "hr24Change",
        "hr24CurrencyVolume",
        "hr24High",
        "hr24Low",
        "lastPrice"
      ],
      "properties": {
        "currency": {
          "type": "string",
          "description": "Currency id"
        },
        "asset": {
          "type": "string",
          "description": "Asset id"
        },
        "lastPrice": {
          "type": "string",
          "description": "Last price"
        },
        "hr24Change": {
          "type": "string",
          "description": "24 hour change percentage (double)"
        },
        "hr24High": {
          "type": "string",
          "description": "24 hour high"
        },
        "hr24Low": {
          "type": "string",
          "description": "24 hour low"
        },
        "hr24CurrencyVolume": {
          "type": "string",
          "description": "24 hour currency volume"
        },
        "hr24AssetVolume": {
          "type": "string",
          "description": "24 hour asset volume"
        },
        "askOrderTotal": {
          "type": "string",
          "description": "Total amount of all ask orders"
        },
        "bidOrderTotal": {
          "type": "string",
          "description": "Total amount of all bid orders"
        },
        "currencyProperties": {
          "type": "string",
          "description": "Currency properties based on protocol and account id"
        },
        "assetProperties": {
          "type": "string",
          "description": "Asset properties based on protocol and account id"
        },
        "currencyDecimals": {
          "type": "integer",
          "format": "int32",
          "description": "Currency decimals"
        },
        "assetDecimals": {
          "type": "integer",
          "format": "int32",
          "description": "Asset decimals"
        }
      },
      "description": "Generic Market class",
      "xml": {
        "name": "Market"
      }
    },
    "PeerStateIndicator": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp"
        },
        "connected": {
          "type": "integer",
          "format": "int32",
          "description": "Connected count"
        },
        "blacklisted": {
          "type": "integer",
          "format": "int32",
          "description": "Blacklisted count"
        },
        "nonConnected": {
          "type": "integer",
          "format": "int32",
          "description": "Non connected count"
        },
        "disconnected": {
          "type": "integer",
          "format": "int32",
          "description": "Disconnected count"
        },
        "all": {
          "type": "integer",
          "format": "int32",
          "description": "Number of all peers"
        }
      },
      "description": "Peer state indicator",
      "xml": {
        "name": "PeerStateIndicator"
      }
    },
    "Payment": {
      "type": "object",
      "required": [
        "currency"
      ],
      "properties": {
        "transaction": {
          "type": "string"
        },
        "currency": {
          "type": "string",
          "description": "Currency id, currency 0 is HEAT all others are assets"
        },
        "quantity": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "recipient": {
          "type": "string"
        },
        "senderPrivateName": {
          "type": "string"
        },
        "recipientPrivateName": {
          "type": "string"
        },
        "senderPublicName": {
          "type": "string"
        },
        "recipientPublicName": {
          "type": "string"
        },
        "senderPublicKey": {
          "type": "string"
        },
        "recipientPublicKey": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32"
        },
        "blockId": {
          "type": "string"
        },
        "messageBytes": {
          "type": "string"
        },
        "messageIsText": {
          "type": "boolean",
          "default": false
        },
        "messageIsEncrypted": {
          "type": "boolean",
          "default": false
        },
        "messageIsEncryptedToSelf": {
          "type": "boolean",
          "default": false
        }
      },
      "description": "Generic Payment class",
      "xml": {
        "name": "Payment"
      }
    },
    "Transaction": {
      "type": "object",
      "required": [
        "amount",
        "attachment",
        "block",
        "blockTimestamp",
        "confirmations",
        "deadline",
        "ecBlockHeight",
        "ecBlockId",
        "fee",
        "fullHash",
        "height",
        "messageBytes",
        "messageIsEncrypted",
        "messageIsEncryptedToSelf",
        "messageIsText",
        "recipient",
        "recipientPublicKey",
        "sender",
        "senderPublicKey",
        "signature",
        "signatureHash",
        "subtype",
        "timestamp",
        "transaction",
        "transactionIndex",
        "type",
        "version"
      ],
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction type"
        },
        "subtype": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction subtype"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The time (in seconds since 24 november 2013 00:00 UTC) of the transaction"
        },
        "deadline": {
          "type": "integer",
          "format": "int32",
          "description": "The deadline (in minutes) for the transaction to be confirmed"
        },
        "senderPublicKey": {
          "type": "string",
          "description": "The public key of the sending account for the transaction"
        },
        "recipient": {
          "type": "string",
          "description": "The account number of the recipient, if applicable"
        },
        "recipientPublicKey": {
          "type": "string",
          "description": "Recipient public key as HEX string"
        },
        "amount": {
          "type": "string",
          "description": "The amount in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "fee": {
          "type": "string",
          "description": "The fee in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "signature": {
          "type": "string",
          "description": "The digital signature of the transaction"
        },
        "signatureHash": {
          "type": "string",
          "description": "A SHA-256 hash of the transaction signature"
        },
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction"
        },
        "transaction": {
          "type": "string",
          "description": "The ID of the newly created transaction"
        },
        "attachment": {
          "type": "object",
          "description": "An object containing any additional data needed for the transaction, if applicable",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sender": {
          "type": "string",
          "description": "The account ID of the sender"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the block in the blockchain"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction version number"
        },
        "ecBlockId": {
          "type": "string",
          "description": "The economic clustering block ID"
        },
        "ecBlockHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The economic clustering block height"
        },
        "messageBytes": {
          "type": "string",
          "description": "The message bytes as HEX if any"
        },
        "messageIsText": {
          "type": "boolean",
          "description": "In case the message is a text message (binary otherwise)",
          "default": false
        },
        "messageIsEncrypted": {
          "type": "boolean",
          "description": "Message is encrypted",
          "default": false
        },
        "messageIsEncryptedToSelf": {
          "type": "boolean",
          "description": "Message is encrypted to self",
          "default": false
        },
        "transactionIndex": {
          "type": "integer",
          "format": "int32",
          "description": "A zero-based index giving the order of the transaction in its block"
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of transaction confirmations"
        },
        "block": {
          "type": "string",
          "description": "The ID of the block containing the transaction"
        },
        "blockTimestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block"
        }
      },
      "description": "Transaction class",
      "xml": {
        "name": "Transaction"
      }
    },
    "BlockchainStatus": {
      "type": "object",
      "properties": {
        "isScanning": {
          "type": "boolean",
          "description": "True if this node is scanning the blockchain, false otherwise",
          "default": false
        },
        "cumulativeDifficulty": {
          "type": "string",
          "description": "The current cumulative miner difficulty"
        },
        "numberOfBlocks": {
          "type": "integer",
          "format": "int32",
          "description": "The number of blocks (height + 1) in the blockchain"
        },
        "numberOfTransactions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of transactions in the blockchain"
        },
        "numberOfUnconfirmedTransactions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of unconfirmed transactions"
        },
        "version": {
          "type": "string",
          "description": "The software version on this node"
        },
        "lastBlock": {
          "type": "string",
          "description": "The last block numeric id"
        },
        "lastBlockTimestamp": {
          "type": "integer",
          "format": "int32",
          "description": "Timestamp of the last block"
        },
        "application": {
          "type": "string",
          "description": "The name of the software running on this node"
        },
        "lastBlockchainFeederHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the last blockchain feeder"
        },
        "time": {
          "type": "integer",
          "format": "int32",
          "description": "The current node time (in seconds since 24 november 2013 00:00 UTC)"
        },
        "lastBlockchainFeeder": {
          "type": "string",
          "description": "The announced name of the feeder of the last blockchain"
        },
        "initialCoinSupply": {
          "type": "string",
          "description": "Amount of HEAT in genesis block (in HQT, 1 HQT is 0.00000001 HEAT)"
        },
        "currentCoinSupply": {
          "type": "string",
          "description": "Current total amount of HEAT (in HQT, 1 HQT is 0.00000001 HEAT)"
        }
      },
      "description": "Blockchain Status class",
      "xml": {
        "name": "BlockchainStatus"
      }
    },
    "State": {
      "type": "object",
      "properties": {
        "isScanning": {
          "type": "boolean",
          "description": "True if this node is scanning the blockchain, false otherwise",
          "default": false
        },
        "cumulativeDifficulty": {
          "type": "string",
          "description": "The current cumulative miner difficulty"
        },
        "numberOfBlocks": {
          "type": "integer",
          "format": "int32",
          "description": "The number of blocks (height + 1) in the blockchain"
        },
        "numberOfTransactions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of transactions in the blockchain"
        },
        "numberOfUnconfirmedTransactions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of unconfirmed transactions"
        },
        "version": {
          "type": "string",
          "description": "The software version on this node"
        },
        "lastBlock": {
          "type": "string",
          "description": "The last block numeric id"
        },
        "lastBlockTimestamp": {
          "type": "integer",
          "format": "int32",
          "description": "Timestamp of the last block"
        },
        "application": {
          "type": "string",
          "description": "The name of the software running on this node"
        },
        "lastBlockchainFeederHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the last blockchain feeder"
        },
        "time": {
          "type": "integer",
          "format": "int32",
          "description": "The current node time (in seconds since 24 november 2013 00:00 UTC)"
        },
        "lastBlockchainFeeder": {
          "type": "string",
          "description": "The announced name of the feeder of the last blockchain"
        },
        "initialCoinSupply": {
          "type": "string",
          "description": "Amount of HEAT in genesis block (in HQT, 1 HQT is 0.00000001 HEAT)"
        },
        "currentCoinSupply": {
          "type": "string",
          "description": "Current total amount of HEAT (in HQT, 1 HQT is 0.00000001 HEAT)"
        },
        "numberOfPeers": {
          "type": "integer",
          "format": "int32",
          "description": "The number of known peers on the network"
        },
        "numberOfUnlockedAccounts": {
          "type": "integer",
          "format": "int32",
          "description": "The number of unlocked accounts on this node"
        },
        "maxMemory": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount of memory the node may use (in Bytes)"
        },
        "freeMemory": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of free memory on this node (in Bytes)"
        },
        "peerPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port used for connecting to peers"
        },
        "availableProcessors": {
          "type": "integer",
          "format": "int32",
          "description": "The number of processors on this node"
        },
        "numberOfAccounts": {
          "type": "integer",
          "format": "int32",
          "description": "The number of accounts in the blockchain"
        },
        "needsAdminPassword": {
          "type": "boolean",
          "description": "True if the heat.disableAdminPassword property is false",
          "default": false
        },
        "totalMemory": {
          "type": "integer",
          "format": "int64",
          "description": "The amount of memory this node is using (in Bytes)"
        },
        "isOffline": {
          "type": "boolean",
          "description": "True if this node is connected to other peers, false otherwise",
          "default": false
        }
      },
      "description": "State class",
      "xml": {
        "name": "State"
      }
    },
    "FullHash": {
      "type": "object",
      "required": [
        "fullHash",
        "transaction"
      ],
      "properties": {
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction"
        },
        "transaction": {
          "type": "string",
          "description": "The transaction ID"
        }
      },
      "description": "FullHash class",
      "xml": {
        "name": "FullHash"
      }
    },
    "PeerRejection": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp"
        },
        "peer": {
          "type": "integer",
          "format": "int32",
          "description": "Peer"
        },
        "heightDelta": {
          "type": "integer",
          "format": "int32",
          "description": "Delta between peers's height and local height"
        },
        "commonBlockHeightDelta": {
          "type": "integer",
          "format": "int32",
          "description": "Non connected count"
        },
        "commonBlockId": {
          "type": "integer",
          "format": "int32",
          "description": "Common block id"
        },
        "commonMilestoneBlockId": {
          "type": "integer",
          "format": "int32",
          "description": "Common milestone block id"
        },
        "peerHasMoreBlocks": {
          "type": "integer",
          "format": "int32",
          "description": "Is peer has more blocks"
        },
        "cumulativeDifficultyRatio": {
          "type": "integer",
          "format": "int32",
          "description": "Cumulative difficulty ratio (peer's cumulative difficulty divided to local cumulative difficulty)"
        }
      },
      "description": "Details why peer rejects the block. Here are the attributes by which the block is rejected.",
      "xml": {
        "name": "PeerStateIndicator"
      }
    },
    "Value": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "Value"
        }
      },
      "description": "Value class",
      "xml": {
        "name": "Value"
      }
    },
    "Block": {
      "type": "object",
      "required": [
        "baseTarget",
        "block",
        "blockSignature",
        "cumulativeDifficulty",
        "generationSignature",
        "generator",
        "generatorPublicKey",
        "generatorPublicName",
        "height",
        "nextBlock",
        "numberOfTransactions",
        "payloadHash",
        "payloadLength",
        "popRewardHQT",
        "posRewardHQT",
        "previousBlock",
        "previousBlockHash",
        "timestamp",
        "totalAmountHQT",
        "totalFeeHQT",
        "transactions",
        "version"
      ],
      "properties": {
        "previousBlockHash": {
          "type": "string",
          "description": "The 32-byte hash of the previous block (as HEX string)"
        },
        "payloadLength": {
          "type": "integer",
          "format": "int32",
          "description": "The length (in bytes) of all transactions included in the block"
        },
        "totalAmountHQT": {
          "type": "string",
          "description": "The total amount in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block"
        },
        "generationSignature": {
          "type": "string",
          "description": "The 32-byte generation signature of the generating account"
        },
        "generator": {
          "type": "string",
          "description": "The generating account number"
        },
        "generatorPublicName": {
          "type": "string",
          "description": "The generator public name"
        },
        "generatorPublicKey": {
          "type": "string",
          "description": "The 32-byte public key of the generating account (as HEX string)"
        },
        "baseTarget": {
          "type": "string",
          "description": "The base target for the next block generation"
        },
        "payloadHash": {
          "type": "string",
          "description": "The 32-byte hash of the payload (all transactions as HEX string)"
        },
        "nextBlock": {
          "type": "string",
          "description": "The next block ID"
        },
        "numberOfTransactions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of transactions in the block"
        },
        "blockSignature": {
          "type": "string",
          "description": "The 64-byte block signature (as HEX string)"
        },
        "transactions": {
          "type": "array",
          "description": "An array of transaction IDs or transaction objects (if includeTransactions provided, refer to Get Transaction for details)",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The block version"
        },
        "totalFeeHQT": {
          "type": "string",
          "description": "The total fee in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block"
        },
        "previousBlock": {
          "type": "string",
          "description": "The previous block ID"
        },
        "cumulativeDifficulty": {
          "type": "string",
          "description": "The cumulative difficulty for the next block generation"
        },
        "block": {
          "type": "string",
          "description": "The block ID"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based block height"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block"
        },
        "popRewardHQT": {
          "type": "string",
          "description": "The total POP fee in HQT (1 HQT equals 0.00000001 HEAT)"
        },
        "posRewardHQT": {
          "type": "string",
          "description": "The total POS miner fee in HQT (1 HQT equals 0.00000001 HEAT)"
        }
      },
      "description": "Block class",
      "xml": {
        "name": "Block"
      }
    },
    "TransactionVerify": {
      "type": "object",
      "required": [
        "amount",
        "attachment",
        "block",
        "blockTimestamp",
        "confirmations",
        "deadline",
        "ecBlockHeight",
        "ecBlockId",
        "fee",
        "fullHash",
        "height",
        "messageBytes",
        "messageIsEncrypted",
        "messageIsEncryptedToSelf",
        "messageIsText",
        "recipient",
        "recipientPublicKey",
        "sender",
        "senderPublicKey",
        "signature",
        "signatureHash",
        "subtype",
        "timestamp",
        "transaction",
        "transactionIndex",
        "type",
        "verify",
        "version"
      ],
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction type"
        },
        "subtype": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction subtype"
        },
        "timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The time (in seconds since 24 november 2013 00:00 UTC) of the transaction"
        },
        "deadline": {
          "type": "integer",
          "format": "int32",
          "description": "The deadline (in minutes) for the transaction to be confirmed"
        },
        "senderPublicKey": {
          "type": "string",
          "description": "The public key of the sending account for the transaction"
        },
        "recipient": {
          "type": "string",
          "description": "The account number of the recipient, if applicable"
        },
        "recipientPublicKey": {
          "type": "string",
          "description": "Recipient public key as HEX string"
        },
        "amount": {
          "type": "string",
          "description": "The amount in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "fee": {
          "type": "string",
          "description": "The fee in HQT (1 HQT equals 0.00000001 HEAT) of the transaction"
        },
        "signature": {
          "type": "string",
          "description": "The digital signature of the transaction"
        },
        "signatureHash": {
          "type": "string",
          "description": "A SHA-256 hash of the transaction signature"
        },
        "fullHash": {
          "type": "string",
          "description": "The full hash of the signed transaction"
        },
        "transaction": {
          "type": "string",
          "description": "The ID of the newly created transaction"
        },
        "attachment": {
          "type": "object",
          "description": "An object containing any additional data needed for the transaction, if applicable",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sender": {
          "type": "string",
          "description": "The account ID of the sender"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The height of the block in the blockchain"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The transaction version number"
        },
        "ecBlockId": {
          "type": "string",
          "description": "The economic clustering block ID"
        },
        "ecBlockHeight": {
          "type": "integer",
          "format": "int32",
          "description": "The economic clustering block height"
        },
        "messageBytes": {
          "type": "string",
          "description": "The message bytes as HEX if any"
        },
        "messageIsText": {
          "type": "boolean",
          "description": "In case the message is a text message (binary otherwise)",
          "default": false
        },
        "messageIsEncrypted": {
          "type": "boolean",
          "description": "Message is encrypted",
          "default": false
        },
        "messageIsEncryptedToSelf": {
          "type": "boolean",
          "description": "Message is encrypted to self",
          "default": false
        },
        "transactionIndex": {
          "type": "integer",
          "format": "int32",
          "description": "A zero-based index giving the order of the transaction in its block"
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of transaction confirmations"
        },
        "block": {
          "type": "string",
          "description": "The ID of the block containing the transaction"
        },
        "blockTimestamp": {
          "type": "integer",
          "format": "int32",
          "description": "The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block"
        },
        "verify": {
          "type": "boolean",
          "description": "Is true if the signature is verified, false otherwise",
          "default": false
        }
      },
      "description": "Transaction Verify class",
      "xml": {
        "name": "TransactionVerify"
      }
    },
    "PeerTelemetry": {
      "type": "object",
      "properties": {
        "peer": {
          "type": "string",
          "description": "Peer"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "description": "Blockchain time of peer telemetry"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Height of peer telemetry"
        },
        "balancesEquality": {
          "type": "integer",
          "format": "int32",
          "description": "Balances equality to the peer: 0 - mismatch, 1 - equals, 2 - unknown"
        },
        "blockBalancesEquality": {
          "type": "integer",
          "format": "int32",
          "description": "Block balances equality to the peer: 0 - mismatch, 1 - equals, 2 - unknown"
        }
      },
      "description": "Peer telemetry",
      "xml": {
        "name": "PeerTelemetry"
      }
    }
  },
  "externalDocs": {
    "description": "Heat Ledger Whitepaper",
    "url": "http://heatledger.com/HEATWhitepaper.pdf"
  }
}
