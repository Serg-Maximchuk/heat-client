/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Lessor;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Account class
 */
@Schema(description = "Account class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class Account {
  @SerializedName("id")
  private String id = null;

  @SerializedName("keyHeight")
  private Integer keyHeight = null;

  @SerializedName("publicKey")
  private String publicKey = null;

  @SerializedName("balance")
  private String balance = null;

  @SerializedName("unconfirmedBalance")
  private String unconfirmedBalance = null;

  @SerializedName("effectiveBalance")
  private String effectiveBalance = null;

  @SerializedName("guaranteedBalance")
  private String guaranteedBalance = null;

  @SerializedName("currentLessee")
  private String currentLessee = null;

  @SerializedName("currentLesseeName")
  private String currentLesseeName = null;

  @SerializedName("currentLeasingHeightFrom")
  private Integer currentLeasingHeightFrom = null;

  @SerializedName("currentLeasingHeightTo")
  private Integer currentLeasingHeightTo = null;

  @SerializedName("nextLessee")
  private String nextLessee = null;

  @SerializedName("nextLesseeName")
  private String nextLesseeName = null;

  @SerializedName("nextLeasingHeightFrom")
  private Integer nextLeasingHeightFrom = null;

  @SerializedName("nextLeasingHeightTo")
  private Integer nextLeasingHeightTo = null;

  @SerializedName("lessors")
  private List<Lessor> lessors = null;

  @SerializedName("publicName")
  private String publicName = null;

  public Account id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Numeric account id
   * @return id
  **/
  @Schema(required = true, description = "Numeric account id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Account keyHeight(Integer keyHeight) {
    this.keyHeight = keyHeight;
    return this;
  }

   /**
   * Height at which the public key was registered
   * @return keyHeight
  **/
  @Schema(required = true, description = "Height at which the public key was registered")
  public Integer getKeyHeight() {
    return keyHeight;
  }

  public void setKeyHeight(Integer keyHeight) {
    this.keyHeight = keyHeight;
  }

  public Account publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Account public key in HEX format
   * @return publicKey
  **/
  @Schema(required = true, description = "Account public key in HEX format")
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }

  public Account balance(String balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Account balance in HQT (1 HQT equals 0.00000001 HEAT)
   * @return balance
  **/
  @Schema(required = true, description = "Account balance in HQT (1 HQT equals 0.00000001 HEAT)")
  public String getBalance() {
    return balance;
  }

  public void setBalance(String balance) {
    this.balance = balance;
  }

  public Account unconfirmedBalance(String unconfirmedBalance) {
    this.unconfirmedBalance = unconfirmedBalance;
    return this;
  }

   /**
   * Unconfirmed account balance in HQT (1 HQT equals 0.00000001 HEAT)
   * @return unconfirmedBalance
  **/
  @Schema(required = true, description = "Unconfirmed account balance in HQT (1 HQT equals 0.00000001 HEAT)")
  public String getUnconfirmedBalance() {
    return unconfirmedBalance;
  }

  public void setUnconfirmedBalance(String unconfirmedBalance) {
    this.unconfirmedBalance = unconfirmedBalance;
  }

  public Account effectiveBalance(String effectiveBalance) {
    this.effectiveBalance = effectiveBalance;
    return this;
  }

   /**
   * Effective account balance in HQT (1 HQT equals 0.00000001 HEAT)
   * @return effectiveBalance
  **/
  @Schema(required = true, description = "Effective account balance in HQT (1 HQT equals 0.00000001 HEAT)")
  public String getEffectiveBalance() {
    return effectiveBalance;
  }

  public void setEffectiveBalance(String effectiveBalance) {
    this.effectiveBalance = effectiveBalance;
  }

  public Account guaranteedBalance(String guaranteedBalance) {
    this.guaranteedBalance = guaranteedBalance;
    return this;
  }

   /**
   * Guaranteed account balance in HQT (1 HQT equals 0.00000001 HEAT)
   * @return guaranteedBalance
  **/
  @Schema(required = true, description = "Guaranteed account balance in HQT (1 HQT equals 0.00000001 HEAT)")
  public String getGuaranteedBalance() {
    return guaranteedBalance;
  }

  public void setGuaranteedBalance(String guaranteedBalance) {
    this.guaranteedBalance = guaranteedBalance;
  }

  public Account currentLessee(String currentLessee) {
    this.currentLessee = currentLessee;
    return this;
  }

   /**
   * Account id of the lessee
   * @return currentLessee
  **/
  @Schema(required = true, description = "Account id of the lessee")
  public String getCurrentLessee() {
    return currentLessee;
  }

  public void setCurrentLessee(String currentLessee) {
    this.currentLessee = currentLessee;
  }

  public Account currentLesseeName(String currentLesseeName) {
    this.currentLesseeName = currentLesseeName;
    return this;
  }

   /**
   * Public name of the current lessee
   * @return currentLesseeName
  **/
  @Schema(required = true, description = "Public name of the current lessee")
  public String getCurrentLesseeName() {
    return currentLesseeName;
  }

  public void setCurrentLesseeName(String currentLesseeName) {
    this.currentLesseeName = currentLesseeName;
  }

  public Account currentLeasingHeightFrom(Integer currentLeasingHeightFrom) {
    this.currentLeasingHeightFrom = currentLeasingHeightFrom;
    return this;
  }

   /**
   * Block height when the lease starts
   * @return currentLeasingHeightFrom
  **/
  @Schema(required = true, description = "Block height when the lease starts")
  public Integer getCurrentLeasingHeightFrom() {
    return currentLeasingHeightFrom;
  }

  public void setCurrentLeasingHeightFrom(Integer currentLeasingHeightFrom) {
    this.currentLeasingHeightFrom = currentLeasingHeightFrom;
  }

  public Account currentLeasingHeightTo(Integer currentLeasingHeightTo) {
    this.currentLeasingHeightTo = currentLeasingHeightTo;
    return this;
  }

   /**
   * Block height when the lease ends
   * @return currentLeasingHeightTo
  **/
  @Schema(required = true, description = "Block height when the lease ends")
  public Integer getCurrentLeasingHeightTo() {
    return currentLeasingHeightTo;
  }

  public void setCurrentLeasingHeightTo(Integer currentLeasingHeightTo) {
    this.currentLeasingHeightTo = currentLeasingHeightTo;
  }

  public Account nextLessee(String nextLessee) {
    this.nextLessee = nextLessee;
    return this;
  }

   /**
   * Account id of the next lessee
   * @return nextLessee
  **/
  @Schema(required = true, description = "Account id of the next lessee")
  public String getNextLessee() {
    return nextLessee;
  }

  public void setNextLessee(String nextLessee) {
    this.nextLessee = nextLessee;
  }

  public Account nextLesseeName(String nextLesseeName) {
    this.nextLesseeName = nextLesseeName;
    return this;
  }

   /**
   * Public name of the next lessee
   * @return nextLesseeName
  **/
  @Schema(required = true, description = "Public name of the next lessee")
  public String getNextLesseeName() {
    return nextLesseeName;
  }

  public void setNextLesseeName(String nextLesseeName) {
    this.nextLesseeName = nextLesseeName;
  }

  public Account nextLeasingHeightFrom(Integer nextLeasingHeightFrom) {
    this.nextLeasingHeightFrom = nextLeasingHeightFrom;
    return this;
  }

   /**
   * Block height when the next lease starts
   * @return nextLeasingHeightFrom
  **/
  @Schema(required = true, description = "Block height when the next lease starts")
  public Integer getNextLeasingHeightFrom() {
    return nextLeasingHeightFrom;
  }

  public void setNextLeasingHeightFrom(Integer nextLeasingHeightFrom) {
    this.nextLeasingHeightFrom = nextLeasingHeightFrom;
  }

  public Account nextLeasingHeightTo(Integer nextLeasingHeightTo) {
    this.nextLeasingHeightTo = nextLeasingHeightTo;
    return this;
  }

   /**
   * Block height when the next lease ends
   * @return nextLeasingHeightTo
  **/
  @Schema(required = true, description = "Block height when the next lease ends")
  public Integer getNextLeasingHeightTo() {
    return nextLeasingHeightTo;
  }

  public void setNextLeasingHeightTo(Integer nextLeasingHeightTo) {
    this.nextLeasingHeightTo = nextLeasingHeightTo;
  }

  public Account lessors(List<Lessor> lessors) {
    this.lessors = lessors;
    return this;
  }

  public Account addLessorsItem(Lessor lessorsItem) {
    if (this.lessors == null) {
      this.lessors = new ArrayList<Lessor>();
    }
    this.lessors.add(lessorsItem);
    return this;
  }

   /**
   * All current and future lessors
   * @return lessors
  **/
  @Schema(description = "All current and future lessors")
  public List<Lessor> getLessors() {
    return lessors;
  }

  public void setLessors(List<Lessor> lessors) {
    this.lessors = lessors;
  }

  public Account publicName(String publicName) {
    this.publicName = publicName;
    return this;
  }

   /**
   * Account public name
   * @return publicName
  **/
  @Schema(required = true, description = "Account public name")
  public String getPublicName() {
    return publicName;
  }

  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.id, account.id) &&
        Objects.equals(this.keyHeight, account.keyHeight) &&
        Objects.equals(this.publicKey, account.publicKey) &&
        Objects.equals(this.balance, account.balance) &&
        Objects.equals(this.unconfirmedBalance, account.unconfirmedBalance) &&
        Objects.equals(this.effectiveBalance, account.effectiveBalance) &&
        Objects.equals(this.guaranteedBalance, account.guaranteedBalance) &&
        Objects.equals(this.currentLessee, account.currentLessee) &&
        Objects.equals(this.currentLesseeName, account.currentLesseeName) &&
        Objects.equals(this.currentLeasingHeightFrom, account.currentLeasingHeightFrom) &&
        Objects.equals(this.currentLeasingHeightTo, account.currentLeasingHeightTo) &&
        Objects.equals(this.nextLessee, account.nextLessee) &&
        Objects.equals(this.nextLesseeName, account.nextLesseeName) &&
        Objects.equals(this.nextLeasingHeightFrom, account.nextLeasingHeightFrom) &&
        Objects.equals(this.nextLeasingHeightTo, account.nextLeasingHeightTo) &&
        Objects.equals(this.lessors, account.lessors) &&
        Objects.equals(this.publicName, account.publicName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, keyHeight, publicKey, balance, unconfirmedBalance, effectiveBalance, guaranteedBalance, currentLessee, currentLesseeName, currentLeasingHeightFrom, currentLeasingHeightTo, nextLessee, nextLesseeName, nextLeasingHeightFrom, nextLeasingHeightTo, lessors, publicName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keyHeight: ").append(toIndentedString(keyHeight)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    unconfirmedBalance: ").append(toIndentedString(unconfirmedBalance)).append("\n");
    sb.append("    effectiveBalance: ").append(toIndentedString(effectiveBalance)).append("\n");
    sb.append("    guaranteedBalance: ").append(toIndentedString(guaranteedBalance)).append("\n");
    sb.append("    currentLessee: ").append(toIndentedString(currentLessee)).append("\n");
    sb.append("    currentLesseeName: ").append(toIndentedString(currentLesseeName)).append("\n");
    sb.append("    currentLeasingHeightFrom: ").append(toIndentedString(currentLeasingHeightFrom)).append("\n");
    sb.append("    currentLeasingHeightTo: ").append(toIndentedString(currentLeasingHeightTo)).append("\n");
    sb.append("    nextLessee: ").append(toIndentedString(nextLessee)).append("\n");
    sb.append("    nextLesseeName: ").append(toIndentedString(nextLesseeName)).append("\n");
    sb.append("    nextLeasingHeightFrom: ").append(toIndentedString(nextLeasingHeightFrom)).append("\n");
    sb.append("    nextLeasingHeightTo: ").append(toIndentedString(nextLeasingHeightTo)).append("\n");
    sb.append("    lessors: ").append(toIndentedString(lessors)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
