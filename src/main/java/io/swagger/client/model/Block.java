/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Transaction;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Block class
 */
@Schema(description = "Block class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class Block {
  @SerializedName("previousBlockHash")
  private String previousBlockHash = null;

  @SerializedName("payloadLength")
  private Integer payloadLength = null;

  @SerializedName("totalAmountHQT")
  private String totalAmountHQT = null;

  @SerializedName("generationSignature")
  private String generationSignature = null;

  @SerializedName("generator")
  private String generator = null;

  @SerializedName("generatorPublicName")
  private String generatorPublicName = null;

  @SerializedName("generatorPublicKey")
  private String generatorPublicKey = null;

  @SerializedName("baseTarget")
  private String baseTarget = null;

  @SerializedName("payloadHash")
  private String payloadHash = null;

  @SerializedName("nextBlock")
  private String nextBlock = null;

  @SerializedName("numberOfTransactions")
  private Integer numberOfTransactions = null;

  @SerializedName("blockSignature")
  private String blockSignature = null;

  @SerializedName("transactions")
  private List<Transaction> transactions = new ArrayList<Transaction>();

  @SerializedName("version")
  private Integer version = null;

  @SerializedName("totalFeeHQT")
  private String totalFeeHQT = null;

  @SerializedName("previousBlock")
  private String previousBlock = null;

  @SerializedName("cumulativeDifficulty")
  private String cumulativeDifficulty = null;

  @SerializedName("block")
  private String block = null;

  @SerializedName("height")
  private Integer height = null;

  @SerializedName("timestamp")
  private Integer timestamp = null;

  @SerializedName("popRewardHQT")
  private String popRewardHQT = null;

  @SerializedName("posRewardHQT")
  private String posRewardHQT = null;

  public Block previousBlockHash(String previousBlockHash) {
    this.previousBlockHash = previousBlockHash;
    return this;
  }

   /**
   * The 32-byte hash of the previous block (as HEX string)
   * @return previousBlockHash
  **/
  @Schema(required = true, description = "The 32-byte hash of the previous block (as HEX string)")
  public String getPreviousBlockHash() {
    return previousBlockHash;
  }

  public void setPreviousBlockHash(String previousBlockHash) {
    this.previousBlockHash = previousBlockHash;
  }

  public Block payloadLength(Integer payloadLength) {
    this.payloadLength = payloadLength;
    return this;
  }

   /**
   * The length (in bytes) of all transactions included in the block
   * @return payloadLength
  **/
  @Schema(required = true, description = "The length (in bytes) of all transactions included in the block")
  public Integer getPayloadLength() {
    return payloadLength;
  }

  public void setPayloadLength(Integer payloadLength) {
    this.payloadLength = payloadLength;
  }

  public Block totalAmountHQT(String totalAmountHQT) {
    this.totalAmountHQT = totalAmountHQT;
    return this;
  }

   /**
   * The total amount in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block
   * @return totalAmountHQT
  **/
  @Schema(required = true, description = "The total amount in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block")
  public String getTotalAmountHQT() {
    return totalAmountHQT;
  }

  public void setTotalAmountHQT(String totalAmountHQT) {
    this.totalAmountHQT = totalAmountHQT;
  }

  public Block generationSignature(String generationSignature) {
    this.generationSignature = generationSignature;
    return this;
  }

   /**
   * The 32-byte generation signature of the generating account
   * @return generationSignature
  **/
  @Schema(required = true, description = "The 32-byte generation signature of the generating account")
  public String getGenerationSignature() {
    return generationSignature;
  }

  public void setGenerationSignature(String generationSignature) {
    this.generationSignature = generationSignature;
  }

  public Block generator(String generator) {
    this.generator = generator;
    return this;
  }

   /**
   * The generating account number
   * @return generator
  **/
  @Schema(required = true, description = "The generating account number")
  public String getGenerator() {
    return generator;
  }

  public void setGenerator(String generator) {
    this.generator = generator;
  }

  public Block generatorPublicName(String generatorPublicName) {
    this.generatorPublicName = generatorPublicName;
    return this;
  }

   /**
   * The generator public name
   * @return generatorPublicName
  **/
  @Schema(required = true, description = "The generator public name")
  public String getGeneratorPublicName() {
    return generatorPublicName;
  }

  public void setGeneratorPublicName(String generatorPublicName) {
    this.generatorPublicName = generatorPublicName;
  }

  public Block generatorPublicKey(String generatorPublicKey) {
    this.generatorPublicKey = generatorPublicKey;
    return this;
  }

   /**
   * The 32-byte public key of the generating account (as HEX string)
   * @return generatorPublicKey
  **/
  @Schema(required = true, description = "The 32-byte public key of the generating account (as HEX string)")
  public String getGeneratorPublicKey() {
    return generatorPublicKey;
  }

  public void setGeneratorPublicKey(String generatorPublicKey) {
    this.generatorPublicKey = generatorPublicKey;
  }

  public Block baseTarget(String baseTarget) {
    this.baseTarget = baseTarget;
    return this;
  }

   /**
   * The base target for the next block generation
   * @return baseTarget
  **/
  @Schema(required = true, description = "The base target for the next block generation")
  public String getBaseTarget() {
    return baseTarget;
  }

  public void setBaseTarget(String baseTarget) {
    this.baseTarget = baseTarget;
  }

  public Block payloadHash(String payloadHash) {
    this.payloadHash = payloadHash;
    return this;
  }

   /**
   * The 32-byte hash of the payload (all transactions as HEX string)
   * @return payloadHash
  **/
  @Schema(required = true, description = "The 32-byte hash of the payload (all transactions as HEX string)")
  public String getPayloadHash() {
    return payloadHash;
  }

  public void setPayloadHash(String payloadHash) {
    this.payloadHash = payloadHash;
  }

  public Block nextBlock(String nextBlock) {
    this.nextBlock = nextBlock;
    return this;
  }

   /**
   * The next block ID
   * @return nextBlock
  **/
  @Schema(required = true, description = "The next block ID")
  public String getNextBlock() {
    return nextBlock;
  }

  public void setNextBlock(String nextBlock) {
    this.nextBlock = nextBlock;
  }

  public Block numberOfTransactions(Integer numberOfTransactions) {
    this.numberOfTransactions = numberOfTransactions;
    return this;
  }

   /**
   * The number of transactions in the block
   * @return numberOfTransactions
  **/
  @Schema(required = true, description = "The number of transactions in the block")
  public Integer getNumberOfTransactions() {
    return numberOfTransactions;
  }

  public void setNumberOfTransactions(Integer numberOfTransactions) {
    this.numberOfTransactions = numberOfTransactions;
  }

  public Block blockSignature(String blockSignature) {
    this.blockSignature = blockSignature;
    return this;
  }

   /**
   * The 64-byte block signature (as HEX string)
   * @return blockSignature
  **/
  @Schema(required = true, description = "The 64-byte block signature (as HEX string)")
  public String getBlockSignature() {
    return blockSignature;
  }

  public void setBlockSignature(String blockSignature) {
    this.blockSignature = blockSignature;
  }

  public Block transactions(List<Transaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public Block addTransactionsItem(Transaction transactionsItem) {
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * An array of transaction IDs or transaction objects (if includeTransactions provided, refer to Get Transaction for details)
   * @return transactions
  **/
  @Schema(required = true, description = "An array of transaction IDs or transaction objects (if includeTransactions provided, refer to Get Transaction for details)")
  public List<Transaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }

  public Block version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * The block version
   * @return version
  **/
  @Schema(required = true, description = "The block version")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public Block totalFeeHQT(String totalFeeHQT) {
    this.totalFeeHQT = totalFeeHQT;
    return this;
  }

   /**
   * The total fee in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block
   * @return totalFeeHQT
  **/
  @Schema(required = true, description = "The total fee in HQT (1 HQT equals 0.00000001 HEAT) of the transactions in the block")
  public String getTotalFeeHQT() {
    return totalFeeHQT;
  }

  public void setTotalFeeHQT(String totalFeeHQT) {
    this.totalFeeHQT = totalFeeHQT;
  }

  public Block previousBlock(String previousBlock) {
    this.previousBlock = previousBlock;
    return this;
  }

   /**
   * The previous block ID
   * @return previousBlock
  **/
  @Schema(required = true, description = "The previous block ID")
  public String getPreviousBlock() {
    return previousBlock;
  }

  public void setPreviousBlock(String previousBlock) {
    this.previousBlock = previousBlock;
  }

  public Block cumulativeDifficulty(String cumulativeDifficulty) {
    this.cumulativeDifficulty = cumulativeDifficulty;
    return this;
  }

   /**
   * The cumulative difficulty for the next block generation
   * @return cumulativeDifficulty
  **/
  @Schema(required = true, description = "The cumulative difficulty for the next block generation")
  public String getCumulativeDifficulty() {
    return cumulativeDifficulty;
  }

  public void setCumulativeDifficulty(String cumulativeDifficulty) {
    this.cumulativeDifficulty = cumulativeDifficulty;
  }

  public Block block(String block) {
    this.block = block;
    return this;
  }

   /**
   * The block ID
   * @return block
  **/
  @Schema(required = true, description = "The block ID")
  public String getBlock() {
    return block;
  }

  public void setBlock(String block) {
    this.block = block;
  }

  public Block height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * The zero-based block height
   * @return height
  **/
  @Schema(required = true, description = "The zero-based block height")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public Block timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block
   * @return timestamp
  **/
  @Schema(required = true, description = "The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block")
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }

  public Block popRewardHQT(String popRewardHQT) {
    this.popRewardHQT = popRewardHQT;
    return this;
  }

   /**
   * The total POP fee in HQT (1 HQT equals 0.00000001 HEAT)
   * @return popRewardHQT
  **/
  @Schema(required = true, description = "The total POP fee in HQT (1 HQT equals 0.00000001 HEAT)")
  public String getPopRewardHQT() {
    return popRewardHQT;
  }

  public void setPopRewardHQT(String popRewardHQT) {
    this.popRewardHQT = popRewardHQT;
  }

  public Block posRewardHQT(String posRewardHQT) {
    this.posRewardHQT = posRewardHQT;
    return this;
  }

   /**
   * The total POS miner fee in HQT (1 HQT equals 0.00000001 HEAT)
   * @return posRewardHQT
  **/
  @Schema(required = true, description = "The total POS miner fee in HQT (1 HQT equals 0.00000001 HEAT)")
  public String getPosRewardHQT() {
    return posRewardHQT;
  }

  public void setPosRewardHQT(String posRewardHQT) {
    this.posRewardHQT = posRewardHQT;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Block block = (Block) o;
    return Objects.equals(this.previousBlockHash, block.previousBlockHash) &&
        Objects.equals(this.payloadLength, block.payloadLength) &&
        Objects.equals(this.totalAmountHQT, block.totalAmountHQT) &&
        Objects.equals(this.generationSignature, block.generationSignature) &&
        Objects.equals(this.generator, block.generator) &&
        Objects.equals(this.generatorPublicName, block.generatorPublicName) &&
        Objects.equals(this.generatorPublicKey, block.generatorPublicKey) &&
        Objects.equals(this.baseTarget, block.baseTarget) &&
        Objects.equals(this.payloadHash, block.payloadHash) &&
        Objects.equals(this.nextBlock, block.nextBlock) &&
        Objects.equals(this.numberOfTransactions, block.numberOfTransactions) &&
        Objects.equals(this.blockSignature, block.blockSignature) &&
        Objects.equals(this.transactions, block.transactions) &&
        Objects.equals(this.version, block.version) &&
        Objects.equals(this.totalFeeHQT, block.totalFeeHQT) &&
        Objects.equals(this.previousBlock, block.previousBlock) &&
        Objects.equals(this.cumulativeDifficulty, block.cumulativeDifficulty) &&
        Objects.equals(this.block, block.block) &&
        Objects.equals(this.height, block.height) &&
        Objects.equals(this.timestamp, block.timestamp) &&
        Objects.equals(this.popRewardHQT, block.popRewardHQT) &&
        Objects.equals(this.posRewardHQT, block.posRewardHQT);
  }

  @Override
  public int hashCode() {
    return Objects.hash(previousBlockHash, payloadLength, totalAmountHQT, generationSignature, generator, generatorPublicName, generatorPublicKey, baseTarget, payloadHash, nextBlock, numberOfTransactions, blockSignature, transactions, version, totalFeeHQT, previousBlock, cumulativeDifficulty, block, height, timestamp, popRewardHQT, posRewardHQT);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Block {\n");
    
    sb.append("    previousBlockHash: ").append(toIndentedString(previousBlockHash)).append("\n");
    sb.append("    payloadLength: ").append(toIndentedString(payloadLength)).append("\n");
    sb.append("    totalAmountHQT: ").append(toIndentedString(totalAmountHQT)).append("\n");
    sb.append("    generationSignature: ").append(toIndentedString(generationSignature)).append("\n");
    sb.append("    generator: ").append(toIndentedString(generator)).append("\n");
    sb.append("    generatorPublicName: ").append(toIndentedString(generatorPublicName)).append("\n");
    sb.append("    generatorPublicKey: ").append(toIndentedString(generatorPublicKey)).append("\n");
    sb.append("    baseTarget: ").append(toIndentedString(baseTarget)).append("\n");
    sb.append("    payloadHash: ").append(toIndentedString(payloadHash)).append("\n");
    sb.append("    nextBlock: ").append(toIndentedString(nextBlock)).append("\n");
    sb.append("    numberOfTransactions: ").append(toIndentedString(numberOfTransactions)).append("\n");
    sb.append("    blockSignature: ").append(toIndentedString(blockSignature)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    totalFeeHQT: ").append(toIndentedString(totalFeeHQT)).append("\n");
    sb.append("    previousBlock: ").append(toIndentedString(previousBlock)).append("\n");
    sb.append("    cumulativeDifficulty: ").append(toIndentedString(cumulativeDifficulty)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    popRewardHQT: ").append(toIndentedString(popRewardHQT)).append("\n");
    sb.append("    posRewardHQT: ").append(toIndentedString(posRewardHQT)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
