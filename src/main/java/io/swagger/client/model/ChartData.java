/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Generic ChardData class
 */
@Schema(description = "Generic ChardData class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class ChartData {
  @SerializedName("currency")
  private String currency = null;

  @SerializedName("asset")
  private String asset = null;

  @SerializedName("window")
  private Integer window = null;

  @SerializedName("timestamp")
  private Integer timestamp = null;

  @SerializedName("data")
  private List<List<Object>> data = new ArrayList<List<Object>>();

  public ChartData currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency id
   * @return currency
  **/
  @Schema(required = true, description = "Currency id")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public ChartData asset(String asset) {
    this.asset = asset;
    return this;
  }

   /**
   * Asset id
   * @return asset
  **/
  @Schema(required = true, description = "Asset id")
  public String getAsset() {
    return asset;
  }

  public void setAsset(String asset) {
    this.asset = asset;
  }

  public ChartData window(Integer window) {
    this.window = window;
    return this;
  }

   /**
   * Window interval in seconds
   * @return window
  **/
  @Schema(required = true, description = "Window interval in seconds")
  public Integer getWindow() {
    return window;
  }

  public void setWindow(Integer window) {
    this.window = window;
  }

  public ChartData timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The genetation timestamp (in seconds since 24 november 2013 00:00 UTC)
   * @return timestamp
  **/
  @Schema(required = true, description = "The genetation timestamp (in seconds since 24 november 2013 00:00 UTC)")
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }

  public ChartData data(List<List<Object>> data) {
    this.data = data;
    return this;
  }

  public ChartData addDataItem(List<Object> dataItem) {
    this.data.add(dataItem);
    return this;
  }

   /**
   * Array of chartdata entries, each entry is an array
   * @return data
  **/
  @Schema(required = true, description = "Array of chartdata entries, each entry is an array")
  public List<List<Object>> getData() {
    return data;
  }

  public void setData(List<List<Object>> data) {
    this.data = data;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChartData chartData = (ChartData) o;
    return Objects.equals(this.currency, chartData.currency) &&
        Objects.equals(this.asset, chartData.asset) &&
        Objects.equals(this.window, chartData.window) &&
        Objects.equals(this.timestamp, chartData.timestamp) &&
        Objects.equals(this.data, chartData.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, asset, window, timestamp, data);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChartData {\n");
    
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
