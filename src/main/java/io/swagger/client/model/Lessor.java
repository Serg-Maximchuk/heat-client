/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Lessor class
 */
@Schema(description = "Lessor class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class Lessor {
  @SerializedName("id")
  private String id = null;

  @SerializedName("currentLessee")
  private String currentLessee = null;

  @SerializedName("currentHeightFrom")
  private Integer currentHeightFrom = null;

  @SerializedName("currentHeightTo")
  private Integer currentHeightTo = null;

  @SerializedName("nextLessee")
  private String nextLessee = null;

  @SerializedName("nextHeightFrom")
  private Integer nextHeightFrom = null;

  @SerializedName("nextHeightTo")
  private Integer nextHeightTo = null;

  @SerializedName("effectiveBalance")
  private String effectiveBalance = null;

  public Lessor id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Numeric account id
   * @return id
  **/
  @Schema(required = true, description = "Numeric account id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Lessor currentLessee(String currentLessee) {
    this.currentLessee = currentLessee;
    return this;
  }

   /**
   * Account id of the lessee
   * @return currentLessee
  **/
  @Schema(description = "Account id of the lessee")
  public String getCurrentLessee() {
    return currentLessee;
  }

  public void setCurrentLessee(String currentLessee) {
    this.currentLessee = currentLessee;
  }

  public Lessor currentHeightFrom(Integer currentHeightFrom) {
    this.currentHeightFrom = currentHeightFrom;
    return this;
  }

   /**
   * Block height when the lease starts,
   * @return currentHeightFrom
  **/
  @Schema(description = "Block height when the lease starts,")
  public Integer getCurrentHeightFrom() {
    return currentHeightFrom;
  }

  public void setCurrentHeightFrom(Integer currentHeightFrom) {
    this.currentHeightFrom = currentHeightFrom;
  }

  public Lessor currentHeightTo(Integer currentHeightTo) {
    this.currentHeightTo = currentHeightTo;
    return this;
  }

   /**
   * Block height when the lease completes
   * @return currentHeightTo
  **/
  @Schema(description = "Block height when the lease completes")
  public Integer getCurrentHeightTo() {
    return currentHeightTo;
  }

  public void setCurrentHeightTo(Integer currentHeightTo) {
    this.currentHeightTo = currentHeightTo;
  }

  public Lessor nextLessee(String nextLessee) {
    this.nextLessee = nextLessee;
    return this;
  }

   /**
   * Account id of the next lessee
   * @return nextLessee
  **/
  @Schema(description = "Account id of the next lessee")
  public String getNextLessee() {
    return nextLessee;
  }

  public void setNextLessee(String nextLessee) {
    this.nextLessee = nextLessee;
  }

  public Lessor nextHeightFrom(Integer nextHeightFrom) {
    this.nextHeightFrom = nextHeightFrom;
    return this;
  }

   /**
   * Block height when the next lease starts
   * @return nextHeightFrom
  **/
  @Schema(description = "Block height when the next lease starts")
  public Integer getNextHeightFrom() {
    return nextHeightFrom;
  }

  public void setNextHeightFrom(Integer nextHeightFrom) {
    this.nextHeightFrom = nextHeightFrom;
  }

  public Lessor nextHeightTo(Integer nextHeightTo) {
    this.nextHeightTo = nextHeightTo;
    return this;
  }

   /**
   * Block height when the next lease completes
   * @return nextHeightTo
  **/
  @Schema(description = "Block height when the next lease completes")
  public Integer getNextHeightTo() {
    return nextHeightTo;
  }

  public void setNextHeightTo(Integer nextHeightTo) {
    this.nextHeightTo = nextHeightTo;
  }

  public Lessor effectiveBalance(String effectiveBalance) {
    this.effectiveBalance = effectiveBalance;
    return this;
  }

   /**
   * Effective account balance in HQT (1 HQT equals 0.00000001 HEAT)
   * @return effectiveBalance
  **/
  @Schema(required = true, description = "Effective account balance in HQT (1 HQT equals 0.00000001 HEAT)")
  public String getEffectiveBalance() {
    return effectiveBalance;
  }

  public void setEffectiveBalance(String effectiveBalance) {
    this.effectiveBalance = effectiveBalance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lessor lessor = (Lessor) o;
    return Objects.equals(this.id, lessor.id) &&
        Objects.equals(this.currentLessee, lessor.currentLessee) &&
        Objects.equals(this.currentHeightFrom, lessor.currentHeightFrom) &&
        Objects.equals(this.currentHeightTo, lessor.currentHeightTo) &&
        Objects.equals(this.nextLessee, lessor.nextLessee) &&
        Objects.equals(this.nextHeightFrom, lessor.nextHeightFrom) &&
        Objects.equals(this.nextHeightTo, lessor.nextHeightTo) &&
        Objects.equals(this.effectiveBalance, lessor.effectiveBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, currentLessee, currentHeightFrom, currentHeightTo, nextLessee, nextHeightFrom, nextHeightTo, effectiveBalance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lessor {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    currentLessee: ").append(toIndentedString(currentLessee)).append("\n");
    sb.append("    currentHeightFrom: ").append(toIndentedString(currentHeightFrom)).append("\n");
    sb.append("    currentHeightTo: ").append(toIndentedString(currentHeightTo)).append("\n");
    sb.append("    nextLessee: ").append(toIndentedString(nextLessee)).append("\n");
    sb.append("    nextHeightFrom: ").append(toIndentedString(nextHeightFrom)).append("\n");
    sb.append("    nextHeightTo: ").append(toIndentedString(nextHeightTo)).append("\n");
    sb.append("    effectiveBalance: ").append(toIndentedString(effectiveBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
