/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Mining class
 */
@Schema(description = "Mining class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class Mining {
  @SerializedName("deadline")
  private Long deadline = null;

  @SerializedName("hitTime")
  private Integer hitTime = null;

  @SerializedName("remaining")
  private Integer remaining = null;

  @SerializedName("foundAndStopped")
  private Boolean foundAndStopped = false;

  @SerializedName("account")
  private String account = null;

  @SerializedName("stopped")
  private Integer stopped = null;

  public Mining deadline(Long deadline) {
    this.deadline = deadline;
    return this;
  }

   /**
   * The estimated time (in seconds since the last block) until the account will mine a block (startMining and getMining only)
   * @return deadline
  **/
  @Schema(description = "The estimated time (in seconds since the last block) until the account will mine a block (startMining and getMining only)")
  public Long getDeadline() {
    return deadline;
  }

  public void setDeadline(Long deadline) {
    this.deadline = deadline;
  }

  public Mining hitTime(Integer hitTime) {
    this.hitTime = hitTime;
    return this;
  }

   /**
   * The estimated time (in seconds since 24 november 2013 00:00 UTC) when the account will mine a block (startMining and getMining only)
   * @return hitTime
  **/
  @Schema(description = "The estimated time (in seconds since 24 november 2013 00:00 UTC) when the account will mine a block (startMining and getMining only)")
  public Integer getHitTime() {
    return hitTime;
  }

  public void setHitTime(Integer hitTime) {
    this.hitTime = hitTime;
  }

  public Mining remaining(Integer remaining) {
    this.remaining = remaining;
    return this;
  }

   /**
   * The deadline less the elapsed time since the last block (getInfo only)
   * @return remaining
  **/
  @Schema(description = "The deadline less the elapsed time since the last block (getInfo only)")
  public Integer getRemaining() {
    return remaining;
  }

  public void setRemaining(Integer remaining) {
    this.remaining = remaining;
  }

  public Mining foundAndStopped(Boolean foundAndStopped) {
    this.foundAndStopped = foundAndStopped;
    return this;
  }

   /**
   * Is true if mining was stopped, false if mining was already stopped (stopMining only)
   * @return foundAndStopped
  **/
  @Schema(description = "Is true if mining was stopped, false if mining was already stopped (stopMining only)")
  public Boolean isFoundAndStopped() {
    return foundAndStopped;
  }

  public void setFoundAndStopped(Boolean foundAndStopped) {
    this.foundAndStopped = foundAndStopped;
  }

  public Mining account(String account) {
    this.account = account;
    return this;
  }

   /**
   * The account number (getInfo only)
   * @return account
  **/
  @Schema(description = "The account number (getInfo only)")
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }

  public Mining stopped(Integer stopped) {
    this.stopped = stopped;
    return this;
  }

   /**
   * Total number of stopped miners (stopMining only)
   * @return stopped
  **/
  @Schema(description = "Total number of stopped miners (stopMining only)")
  public Integer getStopped() {
    return stopped;
  }

  public void setStopped(Integer stopped) {
    this.stopped = stopped;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mining mining = (Mining) o;
    return Objects.equals(this.deadline, mining.deadline) &&
        Objects.equals(this.hitTime, mining.hitTime) &&
        Objects.equals(this.remaining, mining.remaining) &&
        Objects.equals(this.foundAndStopped, mining.foundAndStopped) &&
        Objects.equals(this.account, mining.account) &&
        Objects.equals(this.stopped, mining.stopped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deadline, hitTime, remaining, foundAndStopped, account, stopped);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mining {\n");
    
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    hitTime: ").append(toIndentedString(hitTime)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("    foundAndStopped: ").append(toIndentedString(foundAndStopped)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    stopped: ").append(toIndentedString(stopped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
