/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Peer class
 */
@Schema(description = "Peer class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class Peer {
  @SerializedName("hallmark")
  private String hallmark = null;

  @SerializedName("downloadedVolume")
  private Long downloadedVolume = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("weight")
  private Integer weight = null;

  @SerializedName("uploadedVolume")
  private Long uploadedVolume = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("platform")
  private String platform = null;

  @SerializedName("lastUpdated")
  private Integer lastUpdated = null;

  @SerializedName("blacklisted")
  private Boolean blacklisted = false;

  @SerializedName("blacklistingCause")
  private String blacklistingCause = null;

  @SerializedName("announcedAddress")
  private String announcedAddress = null;

  @SerializedName("application")
  private String application = null;

  @SerializedName("state")
  private Integer state = null;

  @SerializedName("shareAddress")
  private Boolean shareAddress = false;

  @SerializedName("blockchainHeight")
  private Integer blockchainHeight = null;

  public Peer hallmark(String hallmark) {
    this.hallmark = hallmark;
    return this;
  }

   /**
   * Hex string of the peer&#x27;s hallmark, if it is defined
   * @return hallmark
  **/
  @Schema(description = "Hex string of the peer's hallmark, if it is defined")
  public String getHallmark() {
    return hallmark;
  }

  public void setHallmark(String hallmark) {
    this.hallmark = hallmark;
  }

  public Peer downloadedVolume(Long downloadedVolume) {
    this.downloadedVolume = downloadedVolume;
    return this;
  }

   /**
   * Number of bytes downloaded by the peer
   * @return downloadedVolume
  **/
  @Schema(required = true, description = "Number of bytes downloaded by the peer")
  public Long getDownloadedVolume() {
    return downloadedVolume;
  }

  public void setDownloadedVolume(Long downloadedVolume) {
    this.downloadedVolume = downloadedVolume;
  }

  public Peer address(String address) {
    this.address = address;
    return this;
  }

   /**
   * IP address or DNS name of the peer
   * @return address
  **/
  @Schema(required = true, description = "IP address or DNS name of the peer")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public Peer weight(Integer weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Peer&#x27;s weight value
   * @return weight
  **/
  @Schema(required = true, description = "Peer's weight value")
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }

  public Peer uploadedVolume(Long uploadedVolume) {
    this.uploadedVolume = uploadedVolume;
    return this;
  }

   /**
   * Number of bytes uploaded by the peer
   * @return uploadedVolume
  **/
  @Schema(required = true, description = "Number of bytes uploaded by the peer")
  public Long getUploadedVolume() {
    return uploadedVolume;
  }

  public void setUploadedVolume(Long uploadedVolume) {
    this.uploadedVolume = uploadedVolume;
  }

  public Peer version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version of the software running on the peer
   * @return version
  **/
  @Schema(required = true, description = "Version of the software running on the peer")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public Peer platform(String platform) {
    this.platform = platform;
    return this;
  }

   /**
   * String representing the peer&#x27;s platform
   * @return platform
  **/
  @Schema(required = true, description = "String representing the peer's platform")
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }

  public Peer lastUpdated(Integer lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * timestamp (in seconds since the genesis block) of the last peer status update
   * @return lastUpdated
  **/
  @Schema(required = true, description = "timestamp (in seconds since the genesis block) of the last peer status update")
  public Integer getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(Integer lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public Peer blacklisted(Boolean blacklisted) {
    this.blacklisted = blacklisted;
    return this;
  }

   /**
   * True if the peer is blacklisted
   * @return blacklisted
  **/
  @Schema(required = true, description = "True if the peer is blacklisted")
  public Boolean isBlacklisted() {
    return blacklisted;
  }

  public void setBlacklisted(Boolean blacklisted) {
    this.blacklisted = blacklisted;
  }

  public Peer blacklistingCause(String blacklistingCause) {
    this.blacklistingCause = blacklistingCause;
    return this;
  }

   /**
   * The cause of blacklisting (if blacklisted is true)
   * @return blacklistingCause
  **/
  @Schema(required = true, description = "The cause of blacklisting (if blacklisted is true)")
  public String getBlacklistingCause() {
    return blacklistingCause;
  }

  public void setBlacklistingCause(String blacklistingCause) {
    this.blacklistingCause = blacklistingCause;
  }

  public Peer announcedAddress(String announcedAddress) {
    this.announcedAddress = announcedAddress;
    return this;
  }

   /**
   * The name that the peer announced to the network (could be a DNS name, IP address, or any other string)
   * @return announcedAddress
  **/
  @Schema(required = true, description = "The name that the peer announced to the network (could be a DNS name, IP address, or any other string)")
  public String getAnnouncedAddress() {
    return announcedAddress;
  }

  public void setAnnouncedAddress(String announcedAddress) {
    this.announcedAddress = announcedAddress;
  }

  public Peer application(String application) {
    this.application = application;
    return this;
  }

   /**
   * The name of the software application
   * @return application
  **/
  @Schema(required = true, description = "The name of the software application")
  public String getApplication() {
    return application;
  }

  public void setApplication(String application) {
    this.application = application;
  }

  public Peer state(Integer state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the peer: 0 for NON_CONNECTED, 1 for CONNECTED, or 2 for DISCONNECTED
   * @return state
  **/
  @Schema(required = true, description = "The state of the peer: 0 for NON_CONNECTED, 1 for CONNECTED, or 2 for DISCONNECTED")
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }

  public Peer shareAddress(Boolean shareAddress) {
    this.shareAddress = shareAddress;
    return this;
  }

   /**
   * True if the address is allowed to be shared with other peers
   * @return shareAddress
  **/
  @Schema(required = true, description = "True if the address is allowed to be shared with other peers")
  public Boolean isShareAddress() {
    return shareAddress;
  }

  public void setShareAddress(Boolean shareAddress) {
    this.shareAddress = shareAddress;
  }

  public Peer blockchainHeight(Integer blockchainHeight) {
    this.blockchainHeight = blockchainHeight;
    return this;
  }

   /**
   * Last known blockchain height
   * @return blockchainHeight
  **/
  @Schema(required = true, description = "Last known blockchain height")
  public Integer getBlockchainHeight() {
    return blockchainHeight;
  }

  public void setBlockchainHeight(Integer blockchainHeight) {
    this.blockchainHeight = blockchainHeight;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Peer peer = (Peer) o;
    return Objects.equals(this.hallmark, peer.hallmark) &&
        Objects.equals(this.downloadedVolume, peer.downloadedVolume) &&
        Objects.equals(this.address, peer.address) &&
        Objects.equals(this.weight, peer.weight) &&
        Objects.equals(this.uploadedVolume, peer.uploadedVolume) &&
        Objects.equals(this.version, peer.version) &&
        Objects.equals(this.platform, peer.platform) &&
        Objects.equals(this.lastUpdated, peer.lastUpdated) &&
        Objects.equals(this.blacklisted, peer.blacklisted) &&
        Objects.equals(this.blacklistingCause, peer.blacklistingCause) &&
        Objects.equals(this.announcedAddress, peer.announcedAddress) &&
        Objects.equals(this.application, peer.application) &&
        Objects.equals(this.state, peer.state) &&
        Objects.equals(this.shareAddress, peer.shareAddress) &&
        Objects.equals(this.blockchainHeight, peer.blockchainHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hallmark, downloadedVolume, address, weight, uploadedVolume, version, platform, lastUpdated, blacklisted, blacklistingCause, announcedAddress, application, state, shareAddress, blockchainHeight);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Peer {\n");
    
    sb.append("    hallmark: ").append(toIndentedString(hallmark)).append("\n");
    sb.append("    downloadedVolume: ").append(toIndentedString(downloadedVolume)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    uploadedVolume: ").append(toIndentedString(uploadedVolume)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    blacklisted: ").append(toIndentedString(blacklisted)).append("\n");
    sb.append("    blacklistingCause: ").append(toIndentedString(blacklistingCause)).append("\n");
    sb.append("    announcedAddress: ").append(toIndentedString(announcedAddress)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    shareAddress: ").append(toIndentedString(shareAddress)).append("\n");
    sb.append("    blockchainHeight: ").append(toIndentedString(blockchainHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
