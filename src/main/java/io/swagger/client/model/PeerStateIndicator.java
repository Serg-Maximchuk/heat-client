/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Peer state indicator
 */
@Schema(description = "Peer state indicator")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class PeerStateIndicator {
  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("connected")
  private Integer connected = null;

  @SerializedName("blacklisted")
  private Integer blacklisted = null;

  @SerializedName("nonConnected")
  private Integer nonConnected = null;

  @SerializedName("disconnected")
  private Integer disconnected = null;

  @SerializedName("all")
  private Integer all = null;

  public PeerStateIndicator timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp
   * @return timestamp
  **/
  @Schema(description = "Timestamp")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public PeerStateIndicator connected(Integer connected) {
    this.connected = connected;
    return this;
  }

   /**
   * Connected count
   * @return connected
  **/
  @Schema(description = "Connected count")
  public Integer getConnected() {
    return connected;
  }

  public void setConnected(Integer connected) {
    this.connected = connected;
  }

  public PeerStateIndicator blacklisted(Integer blacklisted) {
    this.blacklisted = blacklisted;
    return this;
  }

   /**
   * Blacklisted count
   * @return blacklisted
  **/
  @Schema(description = "Blacklisted count")
  public Integer getBlacklisted() {
    return blacklisted;
  }

  public void setBlacklisted(Integer blacklisted) {
    this.blacklisted = blacklisted;
  }

  public PeerStateIndicator nonConnected(Integer nonConnected) {
    this.nonConnected = nonConnected;
    return this;
  }

   /**
   * Non connected count
   * @return nonConnected
  **/
  @Schema(description = "Non connected count")
  public Integer getNonConnected() {
    return nonConnected;
  }

  public void setNonConnected(Integer nonConnected) {
    this.nonConnected = nonConnected;
  }

  public PeerStateIndicator disconnected(Integer disconnected) {
    this.disconnected = disconnected;
    return this;
  }

   /**
   * Disconnected count
   * @return disconnected
  **/
  @Schema(description = "Disconnected count")
  public Integer getDisconnected() {
    return disconnected;
  }

  public void setDisconnected(Integer disconnected) {
    this.disconnected = disconnected;
  }

  public PeerStateIndicator all(Integer all) {
    this.all = all;
    return this;
  }

   /**
   * Number of all peers
   * @return all
  **/
  @Schema(description = "Number of all peers")
  public Integer getAll() {
    return all;
  }

  public void setAll(Integer all) {
    this.all = all;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeerStateIndicator peerStateIndicator = (PeerStateIndicator) o;
    return Objects.equals(this.timestamp, peerStateIndicator.timestamp) &&
        Objects.equals(this.connected, peerStateIndicator.connected) &&
        Objects.equals(this.blacklisted, peerStateIndicator.blacklisted) &&
        Objects.equals(this.nonConnected, peerStateIndicator.nonConnected) &&
        Objects.equals(this.disconnected, peerStateIndicator.disconnected) &&
        Objects.equals(this.all, peerStateIndicator.all);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, connected, blacklisted, nonConnected, disconnected, all);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeerStateIndicator {\n");
    
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    blacklisted: ").append(toIndentedString(blacklisted)).append("\n");
    sb.append("    nonConnected: ").append(toIndentedString(nonConnected)).append("\n");
    sb.append("    disconnected: ").append(toIndentedString(disconnected)).append("\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
