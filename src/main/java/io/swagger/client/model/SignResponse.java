/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Sign Response class
 */
@Schema(description = "Sign Response class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class SignResponse {
  @SerializedName("signatureHash")
  private String signatureHash = null;

  @SerializedName("verify")
  private Boolean verify = false;

  @SerializedName("transactionBytes")
  private String transactionBytes = null;

  @SerializedName("fullHash")
  private String fullHash = null;

  @SerializedName("transaction")
  private String transaction = null;

  public SignResponse signatureHash(String signatureHash) {
    this.signatureHash = signatureHash;
    return this;
  }

   /**
   * A SHA-256 hash of the transaction signature, used in escrow transactions
   * @return signatureHash
  **/
  @Schema(required = true, description = "A SHA-256 hash of the transaction signature, used in escrow transactions")
  public String getSignatureHash() {
    return signatureHash;
  }

  public void setSignatureHash(String signatureHash) {
    this.signatureHash = signatureHash;
  }

  public SignResponse verify(Boolean verify) {
    this.verify = verify;
    return this;
  }

   /**
   * Is true if the signature is verified, false if not
   * @return verify
  **/
  @Schema(required = true, description = "Is true if the signature is verified, false if not")
  public Boolean isVerify() {
    return verify;
  }

  public void setVerify(Boolean verify) {
    this.verify = verify;
  }

  public SignResponse transactionBytes(String transactionBytes) {
    this.transactionBytes = transactionBytes;
    return this;
  }

   /**
   * The signed transaction bytes
   * @return transactionBytes
  **/
  @Schema(required = true, description = "The signed transaction bytes")
  public String getTransactionBytes() {
    return transactionBytes;
  }

  public void setTransactionBytes(String transactionBytes) {
    this.transactionBytes = transactionBytes;
  }

  public SignResponse fullHash(String fullHash) {
    this.fullHash = fullHash;
    return this;
  }

   /**
   * The full hash of the signed transaction
   * @return fullHash
  **/
  @Schema(required = true, description = "The full hash of the signed transaction")
  public String getFullHash() {
    return fullHash;
  }

  public void setFullHash(String fullHash) {
    this.fullHash = fullHash;
  }

  public SignResponse transaction(String transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * The transaction ID, derived from the fullHash
   * @return transaction
  **/
  @Schema(required = true, description = "The transaction ID, derived from the fullHash")
  public String getTransaction() {
    return transaction;
  }

  public void setTransaction(String transaction) {
    this.transaction = transaction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignResponse signResponse = (SignResponse) o;
    return Objects.equals(this.signatureHash, signResponse.signatureHash) &&
        Objects.equals(this.verify, signResponse.verify) &&
        Objects.equals(this.transactionBytes, signResponse.transactionBytes) &&
        Objects.equals(this.fullHash, signResponse.fullHash) &&
        Objects.equals(this.transaction, signResponse.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signatureHash, verify, transactionBytes, fullHash, transaction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignResponse {\n");
    
    sb.append("    signatureHash: ").append(toIndentedString(signatureHash)).append("\n");
    sb.append("    verify: ").append(toIndentedString(verify)).append("\n");
    sb.append("    transactionBytes: ").append(toIndentedString(transactionBytes)).append("\n");
    sb.append("    fullHash: ").append(toIndentedString(fullHash)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
