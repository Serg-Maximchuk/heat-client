/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Transaction;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Create transaction response
 */
@Schema(description = "Create transaction response")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class TransactionCreate {
  @SerializedName("signatureHash")
  private String signatureHash = null;

  @SerializedName("transaction")
  private String transaction = null;

  @SerializedName("fullHash")
  private String fullHash = null;

  @SerializedName("transactionBytes")
  private String transactionBytes = null;

  @SerializedName("broadcasted")
  private Boolean broadcasted = false;

  @SerializedName("transactionJSON")
  private Transaction transactionJSON = null;

  @SerializedName("unsignedTransactionBytes")
  private String unsignedTransactionBytes = null;

  public TransactionCreate signatureHash(String signatureHash) {
    this.signatureHash = signatureHash;
    return this;
  }

   /**
   * SHA-256 hash of the transaction signature (only when secretPhrase sent to server)
   * @return signatureHash
  **/
  @Schema(description = "SHA-256 hash of the transaction signature (only when secretPhrase sent to server)")
  public String getSignatureHash() {
    return signatureHash;
  }

  public void setSignatureHash(String signatureHash) {
    this.signatureHash = signatureHash;
  }

  public TransactionCreate transaction(String transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * The ID of the newly created transaction (only when secretPhrase sent to server)
   * @return transaction
  **/
  @Schema(description = "The ID of the newly created transaction (only when secretPhrase sent to server)")
  public String getTransaction() {
    return transaction;
  }

  public void setTransaction(String transaction) {
    this.transaction = transaction;
  }

  public TransactionCreate fullHash(String fullHash) {
    this.fullHash = fullHash;
    return this;
  }

   /**
   * The full hash of the signed transaction (only when secretPhrase sent to server)
   * @return fullHash
  **/
  @Schema(description = "The full hash of the signed transaction (only when secretPhrase sent to server)")
  public String getFullHash() {
    return fullHash;
  }

  public void setFullHash(String fullHash) {
    this.fullHash = fullHash;
  }

  public TransactionCreate transactionBytes(String transactionBytes) {
    this.transactionBytes = transactionBytes;
    return this;
  }

   /**
   * The signed transaction bytes (only when secretPhrase sent to server)
   * @return transactionBytes
  **/
  @Schema(description = "The signed transaction bytes (only when secretPhrase sent to server)")
  public String getTransactionBytes() {
    return transactionBytes;
  }

  public void setTransactionBytes(String transactionBytes) {
    this.transactionBytes = transactionBytes;
  }

  public TransactionCreate broadcasted(Boolean broadcasted) {
    this.broadcasted = broadcasted;
    return this;
  }

   /**
   * True if the transaction was broadcast, false otherwise
   * @return broadcasted
  **/
  @Schema(required = true, description = "True if the transaction was broadcast, false otherwise")
  public Boolean isBroadcasted() {
    return broadcasted;
  }

  public void setBroadcasted(Boolean broadcasted) {
    this.broadcasted = broadcasted;
  }

  public TransactionCreate transactionJSON(Transaction transactionJSON) {
    this.transactionJSON = transactionJSON;
    return this;
  }

   /**
   * Get transactionJSON
   * @return transactionJSON
  **/
  @Schema(required = true, description = "")
  public Transaction getTransactionJSON() {
    return transactionJSON;
  }

  public void setTransactionJSON(Transaction transactionJSON) {
    this.transactionJSON = transactionJSON;
  }

  public TransactionCreate unsignedTransactionBytes(String unsignedTransactionBytes) {
    this.unsignedTransactionBytes = unsignedTransactionBytes;
    return this;
  }

   /**
   * The unsigned transaction bytes as HEX string
   * @return unsignedTransactionBytes
  **/
  @Schema(required = true, description = "The unsigned transaction bytes as HEX string")
  public String getUnsignedTransactionBytes() {
    return unsignedTransactionBytes;
  }

  public void setUnsignedTransactionBytes(String unsignedTransactionBytes) {
    this.unsignedTransactionBytes = unsignedTransactionBytes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCreate transactionCreate = (TransactionCreate) o;
    return Objects.equals(this.signatureHash, transactionCreate.signatureHash) &&
        Objects.equals(this.transaction, transactionCreate.transaction) &&
        Objects.equals(this.fullHash, transactionCreate.fullHash) &&
        Objects.equals(this.transactionBytes, transactionCreate.transactionBytes) &&
        Objects.equals(this.broadcasted, transactionCreate.broadcasted) &&
        Objects.equals(this.transactionJSON, transactionCreate.transactionJSON) &&
        Objects.equals(this.unsignedTransactionBytes, transactionCreate.unsignedTransactionBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signatureHash, transaction, fullHash, transactionBytes, broadcasted, transactionJSON, unsignedTransactionBytes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCreate {\n");
    
    sb.append("    signatureHash: ").append(toIndentedString(signatureHash)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    fullHash: ").append(toIndentedString(fullHash)).append("\n");
    sb.append("    transactionBytes: ").append(toIndentedString(transactionBytes)).append("\n");
    sb.append("    broadcasted: ").append(toIndentedString(broadcasted)).append("\n");
    sb.append("    transactionJSON: ").append(toIndentedString(transactionJSON)).append("\n");
    sb.append("    unsignedTransactionBytes: ").append(toIndentedString(unsignedTransactionBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
