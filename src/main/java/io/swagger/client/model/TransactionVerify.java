/*
 * HEAT API
 * The HEAT <u><b>INTERACTIVE</b></u> REST API, 
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Transaction Verify class
 */
@Schema(description = "Transaction Verify class")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-28T22:39:51.557155300+03:00[Europe/Helsinki]")
public class TransactionVerify {
  @SerializedName("type")
  private Integer type = null;

  @SerializedName("subtype")
  private Integer subtype = null;

  @SerializedName("timestamp")
  private Integer timestamp = null;

  @SerializedName("deadline")
  private Integer deadline = null;

  @SerializedName("senderPublicKey")
  private String senderPublicKey = null;

  @SerializedName("recipient")
  private String recipient = null;

  @SerializedName("recipientPublicKey")
  private String recipientPublicKey = null;

  @SerializedName("amount")
  private String amount = null;

  @SerializedName("fee")
  private String fee = null;

  @SerializedName("signature")
  private String signature = null;

  @SerializedName("signatureHash")
  private String signatureHash = null;

  @SerializedName("fullHash")
  private String fullHash = null;

  @SerializedName("transaction")
  private String transaction = null;

  @SerializedName("attachment")
  private Map<String, Object> attachment = new HashMap<String, Object>();

  @SerializedName("sender")
  private String sender = null;

  @SerializedName("height")
  private Integer height = null;

  @SerializedName("version")
  private Integer version = null;

  @SerializedName("ecBlockId")
  private String ecBlockId = null;

  @SerializedName("ecBlockHeight")
  private Integer ecBlockHeight = null;

  @SerializedName("messageBytes")
  private String messageBytes = null;

  @SerializedName("messageIsText")
  private Boolean messageIsText = false;

  @SerializedName("messageIsEncrypted")
  private Boolean messageIsEncrypted = false;

  @SerializedName("messageIsEncryptedToSelf")
  private Boolean messageIsEncryptedToSelf = false;

  @SerializedName("transactionIndex")
  private Integer transactionIndex = null;

  @SerializedName("confirmations")
  private Integer confirmations = null;

  @SerializedName("block")
  private String block = null;

  @SerializedName("blockTimestamp")
  private Integer blockTimestamp = null;

  @SerializedName("verify")
  private Boolean verify = false;

  public TransactionVerify type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * The transaction type
   * @return type
  **/
  @Schema(required = true, description = "The transaction type")
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }

  public TransactionVerify subtype(Integer subtype) {
    this.subtype = subtype;
    return this;
  }

   /**
   * The transaction subtype
   * @return subtype
  **/
  @Schema(required = true, description = "The transaction subtype")
  public Integer getSubtype() {
    return subtype;
  }

  public void setSubtype(Integer subtype) {
    this.subtype = subtype;
  }

  public TransactionVerify timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The time (in seconds since 24 november 2013 00:00 UTC) of the transaction
   * @return timestamp
  **/
  @Schema(required = true, description = "The time (in seconds since 24 november 2013 00:00 UTC) of the transaction")
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }

  public TransactionVerify deadline(Integer deadline) {
    this.deadline = deadline;
    return this;
  }

   /**
   * The deadline (in minutes) for the transaction to be confirmed
   * @return deadline
  **/
  @Schema(required = true, description = "The deadline (in minutes) for the transaction to be confirmed")
  public Integer getDeadline() {
    return deadline;
  }

  public void setDeadline(Integer deadline) {
    this.deadline = deadline;
  }

  public TransactionVerify senderPublicKey(String senderPublicKey) {
    this.senderPublicKey = senderPublicKey;
    return this;
  }

   /**
   * The public key of the sending account for the transaction
   * @return senderPublicKey
  **/
  @Schema(required = true, description = "The public key of the sending account for the transaction")
  public String getSenderPublicKey() {
    return senderPublicKey;
  }

  public void setSenderPublicKey(String senderPublicKey) {
    this.senderPublicKey = senderPublicKey;
  }

  public TransactionVerify recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * The account number of the recipient, if applicable
   * @return recipient
  **/
  @Schema(required = true, description = "The account number of the recipient, if applicable")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }

  public TransactionVerify recipientPublicKey(String recipientPublicKey) {
    this.recipientPublicKey = recipientPublicKey;
    return this;
  }

   /**
   * Recipient public key as HEX string
   * @return recipientPublicKey
  **/
  @Schema(required = true, description = "Recipient public key as HEX string")
  public String getRecipientPublicKey() {
    return recipientPublicKey;
  }

  public void setRecipientPublicKey(String recipientPublicKey) {
    this.recipientPublicKey = recipientPublicKey;
  }

  public TransactionVerify amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount in HQT (1 HQT equals 0.00000001 HEAT) of the transaction
   * @return amount
  **/
  @Schema(required = true, description = "The amount in HQT (1 HQT equals 0.00000001 HEAT) of the transaction")
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public TransactionVerify fee(String fee) {
    this.fee = fee;
    return this;
  }

   /**
   * The fee in HQT (1 HQT equals 0.00000001 HEAT) of the transaction
   * @return fee
  **/
  @Schema(required = true, description = "The fee in HQT (1 HQT equals 0.00000001 HEAT) of the transaction")
  public String getFee() {
    return fee;
  }

  public void setFee(String fee) {
    this.fee = fee;
  }

  public TransactionVerify signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * The digital signature of the transaction
   * @return signature
  **/
  @Schema(required = true, description = "The digital signature of the transaction")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public TransactionVerify signatureHash(String signatureHash) {
    this.signatureHash = signatureHash;
    return this;
  }

   /**
   * A SHA-256 hash of the transaction signature
   * @return signatureHash
  **/
  @Schema(required = true, description = "A SHA-256 hash of the transaction signature")
  public String getSignatureHash() {
    return signatureHash;
  }

  public void setSignatureHash(String signatureHash) {
    this.signatureHash = signatureHash;
  }

  public TransactionVerify fullHash(String fullHash) {
    this.fullHash = fullHash;
    return this;
  }

   /**
   * The full hash of the signed transaction
   * @return fullHash
  **/
  @Schema(required = true, description = "The full hash of the signed transaction")
  public String getFullHash() {
    return fullHash;
  }

  public void setFullHash(String fullHash) {
    this.fullHash = fullHash;
  }

  public TransactionVerify transaction(String transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * The ID of the newly created transaction
   * @return transaction
  **/
  @Schema(required = true, description = "The ID of the newly created transaction")
  public String getTransaction() {
    return transaction;
  }

  public void setTransaction(String transaction) {
    this.transaction = transaction;
  }

  public TransactionVerify attachment(Map<String, Object> attachment) {
    this.attachment = attachment;
    return this;
  }

  public TransactionVerify putAttachmentItem(String key, Object attachmentItem) {
    this.attachment.put(key, attachmentItem);
    return this;
  }

   /**
   * An object containing any additional data needed for the transaction, if applicable
   * @return attachment
  **/
  @Schema(required = true, description = "An object containing any additional data needed for the transaction, if applicable")
  public Map<String, Object> getAttachment() {
    return attachment;
  }

  public void setAttachment(Map<String, Object> attachment) {
    this.attachment = attachment;
  }

  public TransactionVerify sender(String sender) {
    this.sender = sender;
    return this;
  }

   /**
   * The account ID of the sender
   * @return sender
  **/
  @Schema(required = true, description = "The account ID of the sender")
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }

  public TransactionVerify height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * The height of the block in the blockchain
   * @return height
  **/
  @Schema(required = true, description = "The height of the block in the blockchain")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public TransactionVerify version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * The transaction version number
   * @return version
  **/
  @Schema(required = true, description = "The transaction version number")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public TransactionVerify ecBlockId(String ecBlockId) {
    this.ecBlockId = ecBlockId;
    return this;
  }

   /**
   * The economic clustering block ID
   * @return ecBlockId
  **/
  @Schema(required = true, description = "The economic clustering block ID")
  public String getEcBlockId() {
    return ecBlockId;
  }

  public void setEcBlockId(String ecBlockId) {
    this.ecBlockId = ecBlockId;
  }

  public TransactionVerify ecBlockHeight(Integer ecBlockHeight) {
    this.ecBlockHeight = ecBlockHeight;
    return this;
  }

   /**
   * The economic clustering block height
   * @return ecBlockHeight
  **/
  @Schema(required = true, description = "The economic clustering block height")
  public Integer getEcBlockHeight() {
    return ecBlockHeight;
  }

  public void setEcBlockHeight(Integer ecBlockHeight) {
    this.ecBlockHeight = ecBlockHeight;
  }

  public TransactionVerify messageBytes(String messageBytes) {
    this.messageBytes = messageBytes;
    return this;
  }

   /**
   * The message bytes as HEX if any
   * @return messageBytes
  **/
  @Schema(required = true, description = "The message bytes as HEX if any")
  public String getMessageBytes() {
    return messageBytes;
  }

  public void setMessageBytes(String messageBytes) {
    this.messageBytes = messageBytes;
  }

  public TransactionVerify messageIsText(Boolean messageIsText) {
    this.messageIsText = messageIsText;
    return this;
  }

   /**
   * In case the message is a text message (binary otherwise)
   * @return messageIsText
  **/
  @Schema(required = true, description = "In case the message is a text message (binary otherwise)")
  public Boolean isMessageIsText() {
    return messageIsText;
  }

  public void setMessageIsText(Boolean messageIsText) {
    this.messageIsText = messageIsText;
  }

  public TransactionVerify messageIsEncrypted(Boolean messageIsEncrypted) {
    this.messageIsEncrypted = messageIsEncrypted;
    return this;
  }

   /**
   * Message is encrypted
   * @return messageIsEncrypted
  **/
  @Schema(required = true, description = "Message is encrypted")
  public Boolean isMessageIsEncrypted() {
    return messageIsEncrypted;
  }

  public void setMessageIsEncrypted(Boolean messageIsEncrypted) {
    this.messageIsEncrypted = messageIsEncrypted;
  }

  public TransactionVerify messageIsEncryptedToSelf(Boolean messageIsEncryptedToSelf) {
    this.messageIsEncryptedToSelf = messageIsEncryptedToSelf;
    return this;
  }

   /**
   * Message is encrypted to self
   * @return messageIsEncryptedToSelf
  **/
  @Schema(required = true, description = "Message is encrypted to self")
  public Boolean isMessageIsEncryptedToSelf() {
    return messageIsEncryptedToSelf;
  }

  public void setMessageIsEncryptedToSelf(Boolean messageIsEncryptedToSelf) {
    this.messageIsEncryptedToSelf = messageIsEncryptedToSelf;
  }

  public TransactionVerify transactionIndex(Integer transactionIndex) {
    this.transactionIndex = transactionIndex;
    return this;
  }

   /**
   * A zero-based index giving the order of the transaction in its block
   * @return transactionIndex
  **/
  @Schema(required = true, description = "A zero-based index giving the order of the transaction in its block")
  public Integer getTransactionIndex() {
    return transactionIndex;
  }

  public void setTransactionIndex(Integer transactionIndex) {
    this.transactionIndex = transactionIndex;
  }

  public TransactionVerify confirmations(Integer confirmations) {
    this.confirmations = confirmations;
    return this;
  }

   /**
   * Number of transaction confirmations
   * @return confirmations
  **/
  @Schema(required = true, description = "Number of transaction confirmations")
  public Integer getConfirmations() {
    return confirmations;
  }

  public void setConfirmations(Integer confirmations) {
    this.confirmations = confirmations;
  }

  public TransactionVerify block(String block) {
    this.block = block;
    return this;
  }

   /**
   * The ID of the block containing the transaction
   * @return block
  **/
  @Schema(required = true, description = "The ID of the block containing the transaction")
  public String getBlock() {
    return block;
  }

  public void setBlock(String block) {
    this.block = block;
  }

  public TransactionVerify blockTimestamp(Integer blockTimestamp) {
    this.blockTimestamp = blockTimestamp;
    return this;
  }

   /**
   * The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block
   * @return blockTimestamp
  **/
  @Schema(required = true, description = "The timestamp (in seconds since 24 november 2013 00:00 UTC) of the block")
  public Integer getBlockTimestamp() {
    return blockTimestamp;
  }

  public void setBlockTimestamp(Integer blockTimestamp) {
    this.blockTimestamp = blockTimestamp;
  }

  public TransactionVerify verify(Boolean verify) {
    this.verify = verify;
    return this;
  }

   /**
   * Is true if the signature is verified, false otherwise
   * @return verify
  **/
  @Schema(required = true, description = "Is true if the signature is verified, false otherwise")
  public Boolean isVerify() {
    return verify;
  }

  public void setVerify(Boolean verify) {
    this.verify = verify;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionVerify transactionVerify = (TransactionVerify) o;
    return Objects.equals(this.type, transactionVerify.type) &&
        Objects.equals(this.subtype, transactionVerify.subtype) &&
        Objects.equals(this.timestamp, transactionVerify.timestamp) &&
        Objects.equals(this.deadline, transactionVerify.deadline) &&
        Objects.equals(this.senderPublicKey, transactionVerify.senderPublicKey) &&
        Objects.equals(this.recipient, transactionVerify.recipient) &&
        Objects.equals(this.recipientPublicKey, transactionVerify.recipientPublicKey) &&
        Objects.equals(this.amount, transactionVerify.amount) &&
        Objects.equals(this.fee, transactionVerify.fee) &&
        Objects.equals(this.signature, transactionVerify.signature) &&
        Objects.equals(this.signatureHash, transactionVerify.signatureHash) &&
        Objects.equals(this.fullHash, transactionVerify.fullHash) &&
        Objects.equals(this.transaction, transactionVerify.transaction) &&
        Objects.equals(this.attachment, transactionVerify.attachment) &&
        Objects.equals(this.sender, transactionVerify.sender) &&
        Objects.equals(this.height, transactionVerify.height) &&
        Objects.equals(this.version, transactionVerify.version) &&
        Objects.equals(this.ecBlockId, transactionVerify.ecBlockId) &&
        Objects.equals(this.ecBlockHeight, transactionVerify.ecBlockHeight) &&
        Objects.equals(this.messageBytes, transactionVerify.messageBytes) &&
        Objects.equals(this.messageIsText, transactionVerify.messageIsText) &&
        Objects.equals(this.messageIsEncrypted, transactionVerify.messageIsEncrypted) &&
        Objects.equals(this.messageIsEncryptedToSelf, transactionVerify.messageIsEncryptedToSelf) &&
        Objects.equals(this.transactionIndex, transactionVerify.transactionIndex) &&
        Objects.equals(this.confirmations, transactionVerify.confirmations) &&
        Objects.equals(this.block, transactionVerify.block) &&
        Objects.equals(this.blockTimestamp, transactionVerify.blockTimestamp) &&
        Objects.equals(this.verify, transactionVerify.verify);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, subtype, timestamp, deadline, senderPublicKey, recipient, recipientPublicKey, amount, fee, signature, signatureHash, fullHash, transaction, attachment, sender, height, version, ecBlockId, ecBlockHeight, messageBytes, messageIsText, messageIsEncrypted, messageIsEncryptedToSelf, transactionIndex, confirmations, block, blockTimestamp, verify);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionVerify {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    senderPublicKey: ").append(toIndentedString(senderPublicKey)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientPublicKey: ").append(toIndentedString(recipientPublicKey)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    signatureHash: ").append(toIndentedString(signatureHash)).append("\n");
    sb.append("    fullHash: ").append(toIndentedString(fullHash)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    ecBlockId: ").append(toIndentedString(ecBlockId)).append("\n");
    sb.append("    ecBlockHeight: ").append(toIndentedString(ecBlockHeight)).append("\n");
    sb.append("    messageBytes: ").append(toIndentedString(messageBytes)).append("\n");
    sb.append("    messageIsText: ").append(toIndentedString(messageIsText)).append("\n");
    sb.append("    messageIsEncrypted: ").append(toIndentedString(messageIsEncrypted)).append("\n");
    sb.append("    messageIsEncryptedToSelf: ").append(toIndentedString(messageIsEncryptedToSelf)).append("\n");
    sb.append("    transactionIndex: ").append(toIndentedString(transactionIndex)).append("\n");
    sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    blockTimestamp: ").append(toIndentedString(blockTimestamp)).append("\n");
    sb.append("    verify: ").append(toIndentedString(verify)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
