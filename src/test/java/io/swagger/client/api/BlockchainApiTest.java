package io.swagger.client.api;

import io.swagger.client.ApiClient;
import io.swagger.client.model.Block;
import io.swagger.client.model.BlockCondensed;
import io.swagger.client.model.BlockchainStatus;
import io.swagger.client.model.Count;
import io.swagger.client.model.Fees;
import io.swagger.client.model.JSONStake;
import io.swagger.client.model.State;
import io.swagger.client.model.Transaction;
import io.swagger.client.model.TransactionExtended;
import io.swagger.client.model.TransactionUnconfirmed;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BlockchainApi
 */
public class BlockchainApiTest {

    private BlockchainApi api;

    @Before
    public void setup() {
        api = new ApiClient().createService(BlockchainApi.class);
    }


    /**
     * Get a list of block objects for an account from start index to end index (requires replicator)
     *
     * 
     */
    @Test
    public void accountBlocksTest() {
        String account = null;
        String firstIndex = null;
        String lastIndex = null;
        String includeTransactions = null;
        // List<BlockCondensed> response = api.accountBlocks(account, firstIndex, lastIndex, includeTransactions);

        // TODO: test validations
    }

    /**
     * Counts all blocks generated by account (requires replicator)
     *
     * 
     */
    @Test
    public void accountBlocksCountTest() {
        String account = null;
        // Count response = api.accountBlocksCount(account);

        // TODO: test validations
    }

    /**
     * Get a block object given a numeric block id
     *
     * 
     */
    @Test
    public void blockTest() {
        String numericId = null;
        String includeTransactions = null;
        // Block response = api.block(numericId, includeTransactions);

        // TODO: test validations
    }

    /**
     * Get a list of block objects from start index to end index (requires replicator)
     *
     * 
     */
    @Test
    public void blocksTest() {
        String firstIndex = null;
        String lastIndex = null;
        String includeTransactions = null;
        // List<BlockCondensed> response = api.blocks(firstIndex, lastIndex, includeTransactions);

        // TODO: test validations
    }

    /**
     * Get the Economic Clustering block based on timestamp
     *
     * 
     */
    @Test
    public void ecblockTest() {
        String timestamp = null;
        // Block response = api.ecblock(timestamp);

        // TODO: test validations
    }

    /**
     * Returns all current fees
     *
     * 
     */
    @Test
    public void feesTest() {
        // Fees response = api.fees();

        // TODO: test validations
    }

    /**
     * Get a block object given its height
     *
     * 
     */
    @Test
    public void heightTest() {
        String height = null;
        String includeTransactions = null;
        // Block response = api.height(height, includeTransactions);

        // TODO: test validations
    }

    /**
     * Returns the combined stake for the past N(min 1, max 1440) block generators
     *
     * 
     */
    @Test
    public void stakeTest() {
        String blockCount = null;
        // JSONStake response = api.stake(blockCount);

        // TODO: test validations
    }

    /**
     * Get the state of the server node and network
     *
     * 
     */
    @Test
    public void statusTest() {
        // BlockchainStatus response = api.status();

        // TODO: test validations
    }

    /**
     * Returns extended state info (slower)
     *
     * 
     */
    @Test
    public void status2Test() {
        // State response = api.status2();

        // TODO: test validations
    }

    /**
     * Get a transaction given its numeric transaction id
     *
     * 
     */
    @Test
    public void transactionTest() {
        String numericId = null;
        // Transaction response = api.transaction(numericId);

        // TODO: test validations
    }

    /**
     * Lists all transactions for a account (requires replicator)
     *
     * 
     */
    @Test
    public void transactionsAccountTest() {
        String account = null;
        String from = null;
        String to = null;
        // List<TransactionExtended> response = api.transactionsAccount(account, from, to);

        // TODO: test validations
    }

    /**
     * Counts all all transactions for a account (requires replicator)
     *
     * 
     */
    @Test
    public void transactionsAccountCountTest() {
        String account = null;
        // Count response = api.transactionsAccountCount(account);

        // TODO: test validations
    }

    /**
     * Lists all transactions (requires replicator)
     *
     * 
     */
    @Test
    public void transactionsAllTest() {
        String from = null;
        String to = null;
        // List<TransactionExtended> response = api.transactionsAll(from, to);

        // TODO: test validations
    }

    /**
     * Counts all all transactions (requires replicator)
     *
     * 
     */
    @Test
    public void transactionsAllCountTest() {
        // Count response = api.transactionsAllCount();

        // TODO: test validations
    }

    /**
     * Lists all transactions for a block (requires replicator)
     *
     * 
     */
    @Test
    public void transactionsBlockTest() {
        String block = null;
        String from = null;
        String to = null;
        // List<TransactionExtended> response = api.transactionsBlock(block, from, to);

        // TODO: test validations
    }

    /**
     * Counts all all transactions for a block (requires replicator)
     *
     * 
     */
    @Test
    public void transactionsBlockCountTest() {
        String block = null;
        // Count response = api.transactionsBlockCount(block);

        // TODO: test validations
    }

    /**
     * Lists all transactions from sender to recipient (requires replicator)
     *
     * 
     */
    @Test
    public void transactionsFromToTest() {
        String sender = null;
        String recipient = null;
        String from = null;
        String to = null;
        // List<TransactionExtended> response = api.transactionsFromTo(sender, recipient, from, to);

        // TODO: test validations
    }

    /**
     * Get a list of unconfirmed transaction ids
     *
     * 
     */
    @Test
    public void unconfirmedIdsTest() {
        String sender = null;
        String recipient = null;
        // List<String> response = api.unconfirmedIds(sender, recipient);

        // TODO: test validations
    }

    /**
     * Get a list of unconfirmed transactions
     *
     * 
     */
    @Test
    public void unconfirmedTransactionsTest() {
        String sender = null;
        String recipient = null;
        // List<TransactionUnconfirmed> response = api.unconfirmedTransactions(sender, recipient);

        // TODO: test validations
    }
}
